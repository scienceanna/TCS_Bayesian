?case
?switch
source('~/Documents/ongoing projects/APP_VS/reanalyse_Buetti2019/ac_analysis.R', echo=TRUE)
calc_D_overall(levels(df$d_feature)[2]), D, "collinear")
calc_D_overall(levels(df$d_feature)[2], D, "collinear")
calc_D_overall(levels(df$d_feature)[[2]], D, "collinear")
?else
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = filter(D, d_feature == f1)$D
D2 = filter(D, d_feature == f2)$D
if (D_model == "collinear") {
D_overall = 1/((1/D1) + (1/D2))
}
else if (D_model == "best") {
D_overall = min(D1, D2)
}
else if (D_model == "orthogonal") {
D_overall = 1 / sqrt(1 / (D1^2 + D2^2))
}
return(as.numeric(D_overall))
}
gen_exp_predictions <- function(df, D_model = "collinear") {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
model = "collinear contrast integration model",
D_p = map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D, D_model))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = filter(D, d_feature == f1)$D
D2 = filter(D, d_feature == f2)$D
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast = 1 / sqrt(1 / (D1^2 + D2^2))
return(list(D_best_feature, D_orth_contrast, D_collinear))
}
gen_exp_predictions <- function(df, D_model = "collinear") {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
model = "collinear contrast integration model",
D_p = map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D, D_model))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
model = "collinear contrast integration model",
D_p = map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
df = d[[1]]
df
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D))
map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D)
levels(df$d_feature)
levels(df$d_feature)[2:4]
map(levels(df$d_feature)[2:4], calc_D_overall, D)
D
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
D
df = d[[3]]
df
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
D
f <- levels(df$d_feature)[2:4]
f1 <- word(f, 1)
f2 <- word(f, 2)
f1
f2
D1 = filter(D, d_feature == f1)$D
D2 = filter(D, d_feature == f2)$D
D1
D2
as.numeric(D2)
D1 = as.numeric(filter(D, d_feature == f1)$D)
D2 = as.numeric(filter(D, d_feature == f2)$D)
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast = 1 / sqrt(1 / (D1^2 + D2^2))
map(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D)
?map
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D, .id = "D")
map(levels(df$d_feature)[2:4], calc_D_overall, D)
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = as.numeric(filter(D, d_feature == f1)$D)
D2 = as.numeric(filter(D, d_feature == f2)$D)
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast = 1 / sqrt(1 / (D1^2 + D2^2))
return(list(D_best_feature, D_orth_contrast, D_collinear))
}
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
map(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D)
map(levels(df$d_feature)[2:4], calc_D_overall, D)
as.array(map(levels(df$d_feature)[2:4], calc_D_overall, D))
simplify(map(levels(df$d_feature)[2:4], calc_D_overall, D))
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
ggplot(aes(x = D_p, y = D)) + geom_point() + geom_abline() +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90))
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = as.numeric(filter(D, d_feature == f1)$D)
D2 = as.numeric(filter(D, d_feature == f2)$D)
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast = 1 / sqrt(1 / (D1^2 + D2^2))
return(list(
"best feature" = D_best_feature,
"orthog. contrast" = D_orth_contrast,
"collinear" = D_collinear))
}
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
left_join(pred_D, exp_D, by = c("exp_number", "d_feature"))
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
c("best feature", "orthog. contrast", "collinear"),
values_to = "D",
names_to = "method")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, `collinear`),
values_to = "D",
names_to = "method")
?pivot_longer
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
values_to = "D",
names_to = "method")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D",
names_to = "method")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D",
names_to = "method",
names_repair = "unique")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method")
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_p, y = D)) + geom_point() + geom_abline() +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline() +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline(linetype = 2) +
geom_smooth(method = "lm")
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline(linetype = 2) +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
