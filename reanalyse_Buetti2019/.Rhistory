D_orth_contrast = 1 / sqrt(1 / (D1^2 + D2^2))
return(list(D_best_feature, D_orth_contrast, D_collinear))
}
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
map(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D)
map_dbl(levels(df$d_feature)[2:4], calc_D_overall, D)
map(levels(df$d_feature)[2:4], calc_D_overall, D)
as.array(map(levels(df$d_feature)[2:4], calc_D_overall, D))
simplify(map(levels(df$d_feature)[2:4], calc_D_overall, D))
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
ggplot(aes(x = D_p, y = D)) + geom_point() + geom_abline() +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90))
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = as.numeric(filter(D, d_feature == f1)$D)
D2 = as.numeric(filter(D, d_feature == f2)$D)
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast = 1 / sqrt(1 / (D1^2 + D2^2))
return(list(
"best feature" = D_best_feature,
"orthog. contrast" = D_orth_contrast,
"collinear" = D_collinear))
}
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
D_p = map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
map_dfc(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
gen_exp_predictions <- function(df) {
exp_n <- unique(df$exp_number)
D <- filter(exp_D, exp_number == exp_n - 1)
d_out <- tibble(
exp_number = exp_n,
d_feature = levels(df$d_feature)[2:4],
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(d[c(3,4,5, 8,9,10)], gen_exp_predictions)
pred_D
left_join(pred_D, exp_D, by = c("exp_number", "d_feature"))
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
c("best feature", "orthog. contrast", "collinear"),
values_to = "D",
names_to = "method")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, `collinear`),
values_to = "D",
names_to = "method")
?pivot_longer
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
values_to = "D",
names_to = "method")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D",
names_to = "method")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D",
names_to = "method",
names_repair = "unique")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method")
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_p, y = D)) + geom_point() + geom_abline() +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline() +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline(linetype = 2) +
geom_smooth(method = "lm")
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_number", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline(linetype = 2) +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
I'library(tidyverse)
library(readxl)
import_experiment <- function(sheet, d_labels, exp_number, exp_part) {
read_excel(
"../previous_work/Buetti2019_data_code/OSF_originaldata.xlsx",
sheet = sheet) %>%
# use tidier variable names
select(
p_id = "Subject",
trial = "Trial",
t_id = "tid",
N_T = "numd",
d_feature = "dcolors",
rt = "RT",
response = "resp",
error = "Error") %>%
# code up p_id, t_id and distracter colour as a factor
mutate(
exp_id = paste(exp_number, exp_part, sep = ""),
p_id = as_factor(p_id),
d_feature = as_factor(d_feature),
d_feature = fct_recode(d_feature, !!!d_labels),
t_id = as_factor(t_id),
t_id = fct_recode(t_id, left = "0", right = "1")) %>%
# remove error trials
filter(error == 0) -> d
return(d)
}
d <- list()
d$e1a <- import_experiment(2,  c(orange = "1", blue = "2", yellow = "3"), 1, "a")
d$e1b <- import_experiment(4,  c(diamond = "1", circle = "2", triangle = "3"), 1, "b")
d$e2a <- import_experiment(6,  c(`orange diamond` = "1", `blue circle` = "2", `yellow triangle` = "3"), 2, "a")
d$e2b <- import_experiment(8,  c(`orange circle` = "1", `yellow diamond` = "2", `blue triangle` = "3"), 2, "b")
d$e2c <- import_experiment(10, c(`blue diamond` = "1", `yellow circle` = "2", `orange triangle` = "3"), 2, "c")
d$e3a <- import_experiment(12, c(orange = "1", blue = "2", yellow = "3"), 3, "a")
d$e3b <- import_experiment(14, c(diamond = "1", circle = "2", semicircle = "3"), 3, "b")
d$e4a <- import_experiment(16, c(`orange diamond` = "1", `blue circle` = "2", `yellow semicircle` = "3"), 4, "a")
d$e4b <- import_experiment(18, c(`orange circle` = "1", `yellow diamond` = "2", `blue semicircle` = "3"), 4, "b")
d$e4c <- import_experiment(20, c(`blue diamond` = "1", `yellow circle` = "2", `orange semicircle` = "3"), 4, "c")
d <- bind_rows(d)
calc_D_per_feature <- function(experiment, df) {
df %>%
filter(exp_id == experiment) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
mutate(d_feature = fct_drop(d_feature)) -> df
bind_rows(
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[2]),
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[3]),
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[4]),
filter(df, N_T>0)) %>%
mutate(d_feature = as_factor(d_feature)) -> df
m <- lm(mean_rt ~  0 + d_feature + log(N_T+1):d_feature, df)
coef_tab <- summary(m)$coefficients
d_out <- tibble(
exp_id = experiment,
d_feature = levels(df$d_feature),
D = c(coef_tab[4:6,1]))
return(d_out)
}
exp_D <- map_dfr(unique(d$exp_id), calc_D_per_feature, d)
# 2C, 3A, 4A numbers look slightly off
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = as.numeric(filter(D, d_feature == f1)$D)
D2 = as.numeric(filter(D, d_feature == f2)$D)
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast =  sqrt(1/((1/D1^2) + (1/D2^2)))
return(list(
"best feature" = D_best_feature,
"orthog. contrast" = D_orth_contrast,
"collinear" = D_collinear))
}
gen_exp_predictions <- function(e_id) {
df <- filter(d, exp_id == e_id) %>%
mutate(d_feature = fct_drop(d_feature))
e_n = parse_number(e_id)
D <- filter(exp_D, parse_number(exp_id) == e_n - 1)
d_out <- tibble(
exp_id = e_id,
d_feature = levels(df$d_feature)[2:4],
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
# Predict experiments
pred_D <- map_df(c("2a", "2b", "2c", "4a", "4b", "4c"), gen_exp_predictions)
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_id", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline(linetype = 2) +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
# Look at indiv differences
calc_D_per_person_feature <- function(p, df) {
df <- filter(df, p_id == p)
bind_rows(
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[2]),
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[3]),
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[4]),
filter(df, N_T>0)) %>%
mutate(d_feature = as_factor(d_feature)) -> df
m <- lm(rt ~  0 + d_feature + log(N_T+1):d_feature, df)
coef_tab <- summary(m)$coefficients
d_out <- tibble(
experiment = unique(df$exp_number),
p_id = p,
d_feature = levels(df$d_feature),
D = c(coef_tab[4:6,1]))
return(d_out)
}
calc_D_indiv_diff <- function(df) {
return(map_dfr(
unique(df$p_id),
calc_D_per_person_feature,
df))
}
D_indiv <- map_dfr(d, calc_D_indiv_diff)
D_indiv %>% ggplot(aes(x = D, y = d_feature)) + geom_boxplot(alpha = 0.5) + facet_wrap(~experiment)
#predict RT
# L indicates the number of distractor types present in the display,
# NT is the total number of distractors,
# Ni is the number of distractors of type i,
# Dj indicates the logarithmic slope parameters associated
# with distractor of type j (organized from smallest D1 to largest DL).
# Note that the D parameter is the one that increases with
# increasing target-distractor similarity.
# The constant a represents the reaction time when the target is alone in the display. Inter-item
# interactions were indexed by the multiplicative factor β. Finally, the index function 1[2, ∞) (j) indicates that the
# sum over Ni only applies when there are at least two different types of lures in the display (j > 1). When j = 1, the
# second sum is zero.
extract_a_value <- function(e_id) {
d %>% filter(parse_number(exp_id) == parse_number(e_id), N_T == 0) %>%
group_by(exp_id, p_id) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
summarise(a = mean(mean_rt)) -> a
return(a$a)
}
extract_L_value <- function(e_id) {
L <- length(unique(filter(d, exp_id == e_id, N_T != 0)$d_feature))
return(L)
}
extract_D <- function(e_id) {
D <- filter(pred_D, exp_id == e_id) %>% arrange(collinear)
# D <- filter(d, exp_id == e_id, N_T > 0, trial == t, p_id == p) %>%
# 	group_by(d_feature) %>%
# 	summarise(N_i = n(), .groups = "drop") %>%
# 	right_join(D, by = "d_feature")
return(D)
}
predict_rt <- function(e_id) {
a <- extract_a_value(e_id)
D <- extract_D(e_id)
N_T <- c(1,4,9,19,31)
rt <- a +  log(N_T + 1) %*% t(D$collinear)
colnames(rt) <- unique(D$d_feature)
d_out <- as_tibble(rt )
d_out <- d_out %>%
mutate(exp_id = e_id, N_T = N_T) %>%
pivot_longer(-c(N_T, exp_id), names_to = "d_feature", values_to = "p_rt")
return(d_out)
}
exps2predict = c("2a", "2b", "2c", "4a", "4b", "4c")
rt_pred <- map_dfr(exps2predict, predict_rt)
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred) %>%
ggplot(aes(x = p_rt, y = mean_rt)) + geom_point(alpha = 0.5)
library(tidyverse)
library(readxl)
import_experiment <- function(sheet, d_labels, exp_number, exp_part) {
read_excel(
"../previous_work/Buetti2019_data_code/OSF_originaldata.xlsx",
sheet = sheet) %>%
# use tidier variable names
select(
p_id = "Subject",
trial = "Trial",
t_id = "tid",
N_T = "numd",
d_feature = "dcolors",
rt = "RT",
response = "resp",
error = "Error") %>%
# code up p_id, t_id and distracter colour as a factor
mutate(
exp_id = paste(exp_number, exp_part, sep = ""),
p_id = as_factor(p_id),
d_feature = as_factor(d_feature),
d_feature = fct_recode(d_feature, !!!d_labels),
t_id = as_factor(t_id),
t_id = fct_recode(t_id, left = "0", right = "1")) %>%
# remove error trials
filter(error == 0) -> d
return(d)
}
d <- list()
d$e1a <- import_experiment(2,  c(orange = "1", blue = "2", yellow = "3"), 1, "a")
d$e1b <- import_experiment(4,  c(diamond = "1", circle = "2", triangle = "3"), 1, "b")
d$e2a <- import_experiment(6,  c(`orange diamond` = "1", `blue circle` = "2", `yellow triangle` = "3"), 2, "a")
d$e2b <- import_experiment(8,  c(`orange circle` = "1", `yellow diamond` = "2", `blue triangle` = "3"), 2, "b")
d$e2c <- import_experiment(10, c(`blue diamond` = "1", `yellow circle` = "2", `orange triangle` = "3"), 2, "c")
d$e3a <- import_experiment(12, c(orange = "1", blue = "2", yellow = "3"), 3, "a")
d$e3b <- import_experiment(14, c(diamond = "1", circle = "2", semicircle = "3"), 3, "b")
d$e4a <- import_experiment(16, c(`orange diamond` = "1", `blue circle` = "2", `yellow semicircle` = "3"), 4, "a")
d$e4b <- import_experiment(18, c(`orange circle` = "1", `yellow diamond` = "2", `blue semicircle` = "3"), 4, "b")
d$e4c <- import_experiment(20, c(`blue diamond` = "1", `yellow circle` = "2", `orange semicircle` = "3"), 4, "c")
d <- bind_rows(d)
calc_D_per_feature <- function(experiment, df) {
df %>%
filter(exp_id == experiment) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
mutate(d_feature = fct_drop(d_feature)) -> df
bind_rows(
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[2]),
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[3]),
filter(df, N_T==0) %>% mutate(d_feature = levels(df$d_feature)[4]),
filter(df, N_T>0)) %>%
mutate(d_feature = as_factor(d_feature)) -> df
m <- lm(mean_rt ~  0 + d_feature + log(N_T+1):d_feature, df)
coef_tab <- summary(m)$coefficients
d_out <- tibble(
exp_id = experiment,
d_feature = levels(df$d_feature),
D = c(coef_tab[4:6,1]))
return(d_out)
}
exp_D <- map_dfr(unique(d$exp_id), calc_D_per_feature, d)
calc_D_overall <- function(f, D, D_model)
{
f1 <- word(f, 1)
f2 <- word(f, 2)
D1 = as.numeric(filter(D, d_feature == f1)$D)
D2 = as.numeric(filter(D, d_feature == f2)$D)
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = min(D1, D2)
D_orth_contrast =  sqrt(1/((1/D1^2) + (1/D2^2)))
return(list(
"best feature" = D_best_feature,
"orthog. contrast" = D_orth_contrast,
"collinear" = D_collinear))
}
gen_exp_predictions <- function(e_id) {
df <- filter(d, exp_id == e_id) %>%
mutate(d_feature = fct_drop(d_feature))
e_n = parse_number(e_id)
D <- filter(exp_D, parse_number(exp_id) == e_n - 1)
d_out <- tibble(
exp_id = e_id,
d_feature = levels(df$d_feature)[2:4],
map_dfr(levels(df$d_feature)[2:4], calc_D_overall, D))
return(d_out)
}
pred_D <- map_df(c("2a", "2b", "2c", "4a", "4b", "4c"), gen_exp_predictions)
# recreate fig 4 (top right)
left_join(pred_D, exp_D, by = c("exp_id", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "D_pred",
names_to = "method") %>%
ggplot(aes(x = D_pred, y = D)) + geom_point() + geom_abline(linetype = 2) +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(0, 90), ylim = c(0, 90)) + facet_wrap(~ method)
ggsave("recreate_fig_4.pdf")
extract_a_value <- function(e_id) {
d %>% filter(parse_number(exp_id) == parse_number(e_id), N_T == 0) %>%
group_by(exp_id, p_id) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
summarise(a = mean(mean_rt)) -> a
return(a$a)
}
extract_L_value <- function(e_id) {
L <- length(unique(filter(d, exp_id == e_id, N_T != 0)$d_feature))
return(L)
}
extract_D <- function(e_id) {
D <- filter(pred_D, exp_id == e_id) %>% arrange(collinear)
# D <- filter(d, exp_id == e_id, N_T > 0, trial == t, p_id == p) %>%
# 	group_by(d_feature) %>%
# 	summarise(N_i = n(), .groups = "drop") %>%
# 	right_join(D, by = "d_feature")
return(D)
}
predict_rt <- function(e_id) {
a <- extract_a_value(e_id)
D <- extract_D(e_id)
N_T <- c(1,4,9,19,31)
rt <- a +  log(N_T + 1) %*% t(D$collinear)
colnames(rt) <- unique(D$d_feature)
d_out <- as_tibble(rt )
d_out <- d_out %>%
mutate(exp_id = e_id, N_T = N_T) %>%
pivot_longer(-c(N_T, exp_id), names_to = "d_feature", values_to = "p_rt")
return(d_out)
}
exps2predict = c("2a", "2b", "2c", "4a", "4b", "4c")
rt_pred <- map_dfr(exps2predict, predict_rt)
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred) %>%
ggplot(aes(x = p_rt, y = mean_rt)) + geom_point(alpha = 0.5)
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred) %>%
ggplot(aes(x = p_rt, y = mean_rt)) + geom_point(alpha = 0.5) + geom_abline()
exps2predict
d
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred) %>%
ggplot(aes(x = p_rt, y = mean_rt)) + geom_point(alpha = 0.5) + geom_abline()
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
knitr::kable()
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
knitr::kable() -> d_out
csv_write(d_out, "mean_rt.csv")
d %>% filter(exp_id %in% exps2predict) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop")  -> d_out
csv_write(d_out, "mean_rt.csv")
write_csv(d_out, "mean_rt.csv")
