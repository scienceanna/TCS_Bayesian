prior_model_log <- readRDS("models/prior_log.models")
prior_model_sft <- readRDS("models/prior_sft.models")
training_models = c("1a", "1b")
plt_nrl <- plot_model_fits_rt(training_models, prior_model_nrl, y_limits = c(-2, 10),feature2plot = "all")
plt_log <- plot_model_fits_rt(training_models, prior_model_log, y_limits = c(0, 10), feature2plot = "all")
plt_sft <- plot_model_fits_rt(training_models, prior_model_sft, y_limits = c(0, 10), feature2plot = "all")
plt_nrl / plt_log / plt_sft
# tidy up, we no longer need to keep hold of these models and plots
rm(
prior_model_nrl,
prior_model_log,
prior_model_sft,
plt_nrl, plt_log, plt_sft)
m_exp1_nrl <- readRDS("models/exp_1_nrl.models")
m_exp1_log <- readRDS("models/exp_1_log.models")
m_exp1_sft <- readRDS("models/exp_1_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "predicted", y_limits = c(0, 2.5))
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "predicted", y_limits = c(0, 2.5))
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "predicted", y_limits = c(0, 2.5))
# plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
bs_exp1_nrl <- bridge_sampler(m_exp1_nrl, silent = TRUE)
bs_exp1_log <- bridge_sampler(m_exp1_log, silent = TRUE)
bs_exp1_sft <- bridge_sampler(m_exp1_sft, silent = TRUE)
#bs_exp1_sft_nolog <- bridge_sampler(m_exp1_sft_nolog, silent = TRUE)
tibble(model = c("normal", "lognormal", "shifted-lognormal"), #, "linear in $N_T$"
weight = post_prob(bs_exp1_nrl, bs_exp1_log, bs_exp1_sft)) %>% # , bs_exp1_sft_nolog
knitr::kable()
#remove the models that we no longer need
rm(m_exp1_nrl, m_exp1_log, m_exp1_sft_nolog)
summary(m_exp1_sft)
plot(m_exp1_sft, pars = "^b_")
m_exp3_nrl <- readRDS("models/exp_3_nrl.models")
m_exp3_log <- readRDS("models/exp_3_log.models")
m_exp3_sft <- readRDS("models/exp_3_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
training_models = c("3a", "3b")
plt_nrl <- plot_model_fits_rt(training_models, m_exp3_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp3_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp3_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp3_nrl, plot_type = "predicted", y_limits = c(0, 2.5))
plt_log <- plot_model_fits_rt(training_models, m_exp3_log, plot_type = "predicted", y_limits = c(0, 2.5))
plt_sft <- plot_model_fits_rt(training_models, m_exp3_sft, plot_type = "predicted", y_limits = c(0, 2.5))
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft# / plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
bs_exp1_nrl <- bridge_sampler(m_exp3_nrl, silent = TRUE)
bs_exp1_log <- bridge_sampler(m_exp3_log, silent = TRUE)
bs_exp1_sft <- bridge_sampler(m_exp3_sft, silent = TRUE)
#bs_exp1_sft_nolog <- bridge_sampler(m_exp1_sft_nolog, silent = TRUE)
tibble(model = c("normal", "lognormal", "shifted-lognormal"), #, "linear in $N_T$"
weight = post_prob(bs_exp1_nrl, bs_exp1_log, bs_exp1_sft)) %>% # , bs_exp1_sft_nolog
knitr::kable()
#remove the models that we no longer need
rm(m_exp1_nrl, m_exp1_log, m_exp1_sft_nolog)
#load previously fitted models
m_exp2_sft <- readRDS("models/exp_2_sft.models")
m_exp4_sft <- readRDS("models/exp_4_sft.models")
slopes1 <- extract_fixed_slopes_from_model(m_exp1_sft)
slopes2 <- extract_fixed_slopes_from_model(m_exp2_sft)
slopes3 <- extract_fixed_slopes_from_model(m_exp3_sft)
slopes4 <- extract_fixed_slopes_from_model(m_exp4_sft)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1"),
slopes3 %>% mutate(exp = "Experiment 3")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(~exp, nrow = 2)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
Dp_samples4 <- map_dfr(c("4a", "4b", "4c"), get_Dp_samples, d, slopes3, slopes4)
# get best possible linear fit of the various methods!
rbind(Dp_samples2, Dp_samples4) %>%
pivot_wider(
c(exp_id, d_feature, iter, De),
names_from = method, values_from = Dp) -> d_lmer
# find mle best fit
m_lmer <- lme4::lmer(data = d_lmer, De ~ best_feature + orthog_contrast + collinear + (1|iter))
d_lmer %>%
mutate(linear_comb = predict(m_lmer)) %>%
pivot_longer(
c(best_feature, orthog_contrast, collinear, linear_comb),
names_to = "method",
values_to = "Dp") %>%
mutate(method = fct_relevel(method, "linear_comb", after = Inf)) -> Dp_samples
#Dp_samples %>% group_by(exp_id, d_feature) %>% summarise(De = mean(De), Dp = mean(Dp))
rm(d_lmer, m_lmer)
Dp_lines <- get_Dp_lines(Dp_samples)
plot_Dp_lines(Dp_lines)
rm(slopes1, slopes2, slopes3, slopes4)
VarCorr(m_exp1_sft)$p_id$sd
VarCorr(m_exp2_sft)$p_id$sd
VarCorr(m_exp1_sft)$residual$sd
VarCorr(m_exp2_sft)$residual$sd
m_prt_linear_transform <- compute_rt_predictions(meth = "linear_comb")
compute_rt_predictions <- function(meth) {
Dp_samples2 %>%
filter(method == meth) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
# now define and run new model!
model_params <- set_up_predict_model(c("2a", "2b", "2c"), "shifted_lognormal", meth, Dp_summary, m_exp1_sft, m_exp2_sft)
m_prt <- run_model(model_params, ppc = "only")
return(m_prt)
}
m_prt_linear_transform <- compute_rt_predictions(meth = "linear_comb")
Dp_samples2
Dp_samples2
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
slopes1 <- extract_fixed_slopes_from_model(m_exp1_sft)
slopes2 <- extract_fixed_slopes_from_model(m_exp2_sft)
slopes3 <- extract_fixed_slopes_from_model(m_exp3_sft)
slopes4 <- extract_fixed_slopes_from_model(m_exp4_sft)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1"),
slopes3 %>% mutate(exp = "Experiment 3")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(~exp, nrow = 2)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
Dp_samples4 <- map_dfr(c("4a", "4b", "4c"), get_Dp_samples, d, slopes3, slopes4)
# get best possible linear fit of the various methods!
rbind(Dp_samples2, Dp_samples4) %>%
pivot_wider(
c(exp_id, d_feature, iter, De),
names_from = method, values_from = Dp) -> d_lmer
# find mle best fit
m_lmer <- lme4::lmer(data = d_lmer, De ~ best_feature + orthog_contrast + collinear + (1|iter))
d_lmer %>%
mutate(linear_comb = predict(m_lmer)) %>%
pivot_longer(
c(best_feature, orthog_contrast, collinear, linear_comb),
names_to = "method",
values_to = "Dp") %>%
mutate(method = fct_relevel(method, "linear_comb", after = Inf)) -> Dp_samples2
#Dp_samples %>% group_by(exp_id, d_feature) %>% summarise(De = mean(De), Dp = mean(Dp))
rm(d_lmer, m_lmer)
Dp_lines <- get_Dp_lines(Dp_samples)
plot_Dp_lines(Dp_lines)
rm(slopes1, slopes2, slopes3, slopes4)
m_prt_linear_transform <- compute_rt_predictions(meth = "linear_comb")
bs_lint <- bridge_sampler(m_prt_linear_transform, silent = TRUE)
post_prob(bs_bfeat,bs_col, bs_orth, bs_lint)
m_prt_best_feature <- compute_rt_predictions(meth = "best_feature")
m_prt_collinear <- compute_rt_predictions(meth = "collinear")
m_prt_orthog_contrast <- compute_rt_predictions(meth = "orthog_contrast")
m_prt_linear_transform <- compute_rt_predictions(meth = "linear_comb")
bs_bfeat <- bridge_sampler(m_prt_best_feature, silent = TRUE)
bs_orth <- bridge_sampler(m_prt_orthog_contrast, silent = TRUE)
bs_col <- bridge_sampler(m_prt_collinear, silent = TRUE)
bs_lint <- bridge_sampler(m_prt_linear_transform, silent = TRUE)
post_prob(bs_bfeat, bs_col, bs_orth)
post_prob(bs_bfeat,bs_col, bs_orth, bs_lint)
compute_rt_predictions <- function(test_data = c("2a", "2b", "2c"), dps=Dp_samples2, meth) {
dps %>%
filter(method == meth) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
# now define and run new model!
model_params <- set_up_predict_model(test_data, "shifted_lognormal", meth, Dp_summary, m_exp1_sft, m_exp2_sft)
m_prt <- run_model(model_params, ppc = "only")
return(m_prt)
}
test_set <- c("2a", "2b", "2c")
m_prt_best_feature2 <- compute_rt_predictions(test_set, Dp_samples2, meth = "best_feature")
Dp_samples4
test_set <- c("4a", "4b", "4c")
m_prt_best_feature4 <- compute_rt_predictions(test_set,Dp_samples4, meth = "best_feature")
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = parallel::detectCores())
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# switch from ms to seconds
# recode experiment as 1, 2, 3 and 4
# remove outlier RTs
d <- our_changes_to_data(d)
prior_model_nrl <- readRDS("models/prior_nrl.models")
prior_model_log <- readRDS("models/prior_log.models")
prior_model_sft <- readRDS("models/prior_sft.models")
training_models = c("1a", "1b")
plt_nrl <- plot_model_fits_rt(training_models, prior_model_nrl, y_limits = c(-2, 10),feature2plot = "all")
plt_log <- plot_model_fits_rt(training_models, prior_model_log, y_limits = c(0, 10), feature2plot = "all")
plt_sft <- plot_model_fits_rt(training_models, prior_model_sft, y_limits = c(0, 10), feature2plot = "all")
plt_nrl / plt_log / plt_sft
# tidy up, we no longer need to keep hold of these models and plots
rm(
prior_model_nrl,
prior_model_log,
prior_model_sft,
plt_nrl, plt_log, plt_sft)
m_exp1_nrl <- readRDS("models/exp_1_nrl.models")
m_exp1_log <- readRDS("models/exp_1_log.models")
m_exp1_sft <- readRDS("models/exp_1_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "predicted", y_limits = c(0, 2.5))
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "predicted", y_limits = c(0, 2.5))
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "predicted", y_limits = c(0, 2.5))
# plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
bs_exp1_nrl <- bridge_sampler(m_exp1_nrl, silent = TRUE)
bs_exp1_log <- bridge_sampler(m_exp1_log, silent = TRUE)
bs_exp1_sft <- bridge_sampler(m_exp1_sft, silent = TRUE)
#bs_exp1_sft_nolog <- bridge_sampler(m_exp1_sft_nolog, silent = TRUE)
tibble(model = c("normal", "lognormal", "shifted-lognormal"), #, "linear in $N_T$"
weight = post_prob(bs_exp1_nrl, bs_exp1_log, bs_exp1_sft)) %>% # , bs_exp1_sft_nolog
knitr::kable()
#remove the models that we no longer need
rm(m_exp1_nrl, m_exp1_log, m_exp1_sft_nolog)
summary(m_exp1_sft)
plot(m_exp1_sft, pars = "^b_")
m_exp3_nrl <- readRDS("models/exp_3_nrl.models")
m_exp3_log <- readRDS("models/exp_3_log.models")
m_exp3_sft <- readRDS("models/exp_3_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
training_models = c("3a", "3b")
plt_nrl <- plot_model_fits_rt(training_models, m_exp3_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp3_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp3_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp3_nrl, plot_type = "predicted", y_limits = c(0, 2.5))
plt_log <- plot_model_fits_rt(training_models, m_exp3_log, plot_type = "predicted", y_limits = c(0, 2.5))
plt_sft <- plot_model_fits_rt(training_models, m_exp3_sft, plot_type = "predicted", y_limits = c(0, 2.5))
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft# / plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
bs_exp1_nrl <- bridge_sampler(m_exp3_nrl, silent = TRUE)
bs_exp1_log <- bridge_sampler(m_exp3_log, silent = TRUE)
bs_exp1_sft <- bridge_sampler(m_exp3_sft, silent = TRUE)
#bs_exp1_sft_nolog <- bridge_sampler(m_exp1_sft_nolog, silent = TRUE)
tibble(model = c("normal", "lognormal", "shifted-lognormal"), #, "linear in $N_T$"
weight = post_prob(bs_exp1_nrl, bs_exp1_log, bs_exp1_sft)) %>% # , bs_exp1_sft_nolog
knitr::kable()
#remove the models that we no longer need
rm(m_exp1_nrl, m_exp1_log, m_exp1_sft_nolog)
#load previously fitted models
m_exp2_sft <- readRDS("models/exp_2_sft.models")
m_exp4_sft <- readRDS("models/exp_4_sft.models")
slopes1 <- extract_fixed_slopes_from_model(m_exp1_sft)
slopes2 <- extract_fixed_slopes_from_model(m_exp2_sft)
slopes3 <- extract_fixed_slopes_from_model(m_exp3_sft)
slopes4 <- extract_fixed_slopes_from_model(m_exp4_sft)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1"),
slopes3 %>% mutate(exp = "Experiment 3")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(~exp, nrow = 2)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
Dp_samples4 <- map_dfr(c("4a", "4b", "4c"), get_Dp_samples, d, slopes3, slopes4)
# get best possible linear fit of the various methods!
rbind(Dp_samples2, Dp_samples4) %>%
pivot_wider(
c(exp_id, d_feature, iter, De),
names_from = method, values_from = Dp) -> d_lmer
# find mle best fit
m_lmer <- lme4::lmer(data = d_lmer, De ~ best_feature + orthog_contrast + collinear + (1|iter))
d_lmer %>%
mutate(linear_comb = predict(m_lmer)) %>%
pivot_longer(
c(best_feature, orthog_contrast, collinear, linear_comb),
names_to = "method",
values_to = "Dp") %>%
mutate(method = fct_relevel(method, "linear_comb", after = Inf)) -> Dp_samples
#Dp_samples %>% group_by(exp_id, d_feature) %>% summarise(De = mean(De), Dp = mean(Dp))
rm(d_lmer, m_lmer)
Dp_lines <- get_Dp_lines(Dp_samples)
plot_Dp_lines(Dp_lines)
rm(slopes1, slopes2, slopes3, slopes4)
VarCorr(m_exp1_sft)$p_id$sd
VarCorr(m_exp2_sft)$p_id$sd
VarCorr(m_exp1_sft)$residual$sd
VarCorr(m_exp2_sft)$residual$sd
Dp_samples2
Dp_samples
compute_rt_predictions <- function(test_data = c("2a", "2b", "2c"), meth) {
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
# now define and run new model!
model_params <- set_up_predict_model(test_data, "shifted_lognormal", meth, Dp_summary, m_exp1_sft, m_exp2_sft)
m_prt <- run_model(model_params, ppc = "only")
return(m_prt)
}
test_set <- c("2a", "2b", "2c")
m_prt_best_feature2 <- compute_rt_predictions(test_set,  meth = "best_feature")
m_prt_linear_transform <- compute_rt_predictions(test_set, meth = "linear_comb")
test_set <- c("2a", "2b", "2c")
m_prt_best_feature2 <- compute_rt_predictions(test_set,  meth = "best_feature")
m_prt_collinear2 <- compute_rt_predictions(test_set, meth = "collinear")
m_prt_orthog_contrast2 <- compute_rt_predictions(test_set, meth = "orthog_contrast")
m_prt_linear_transform <- compute_rt_predictions(test_set, meth = "linear_comb")
bs_bfeat <- bridge_sampler(m_prt_best_feature2, silent = TRUE)
bs_orth <- bridge_sampler(m_prt_orthog_contrast2, silent = TRUE)
bs_col <- bridge_sampler(m_prt_collinear2, silent = TRUE)
bs_lint <- bridge_sampler(m_prt_linear_transform, silent = TRUE)
post_prob(bs_bfeat, bs_col, bs_orth)
post_prob(bs_bfeat,bs_col, bs_orth, bs_lint)
test_set <- c("4a", "4b", "4c")
m_prt_best_feature4 <- compute_rt_predictions(test_set, meth = "best_feature")
compute_rt_predictions <- function(test_data = c("2a", "2b", "2c"), meth, onefm, twofm, ) {
compute_rt_predictions <- function(test_data = c("2a", "2b", "2c"), meth, onefm, twofm) {
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
# now define and run new model!
model_params <- set_up_predict_model(test_data, "shifted_lognormal", meth, Dp_summary, onefm, twofm)
m_prt <- run_model(model_params, ppc = "only")
return(m_prt)
}
m_prt_best_feature4 <- compute_rt_predictions(test_set, meth = "best_feature", m_exp3_sft, m_exp4_sft)
m_prt_collinear4 <- compute_rt_predictions(test_set, meth = "collinear", m_exp3_sft, m_exp4_sft)
m_prt_orthog_contrast4 <- compute_rt_predictions(test_set, meth = "orthog_contrast", m_exp3_sft, m_exp4_sft)
m_prt_linear_transform4 <- compute_rt_predictions(test_set, meth = "linear_comb", m_exp3_sft, m_exp4_sft)
bs_bfeat <- bridge_sampler(m_prt_best_feature4, silent = TRUE)
bs_orth <- bridge_sampler(m_prt_orthog_contrast4, silent = TRUE)
bs_col <- bridge_sampler(m_prt_collinear4, silent = TRUE)
bs_lint <- bridge_sampler(m_prt_linear_transform4, silent = TRUE)
post_prob(bs_bfeat,bs_col, bs_orth, bs_lint)
post_prob(bs_col,  bs_lint)
plot_model_fits_rt(c("2a", "2b", "2c"), m_prt_collinear, y_limits = c(0.2, 0.8), n_row = 3, plot_type = "fitted")
plot_model_fits_rt(c("2a", "2b", "2c"), m_prt_collinear2, y_limits = c(0.2, 0.8), n_row = 3, plot_type = "fitted")
plot_model_fits_rt(c("2a", "2b", "2c"), m_prt_linear_transform, y_limits = c(0.2, 0.8), n_row = 3, plot_type = "fitted")
model_weights(bs_col,  bs_lint)
model_weights(m_prt_collinear4,  m_prt_linear_transform4)
m_prt_collinear4
m_prt_linear_transform
m_prt_linear_transform4
fixef(m_prt_linear_transform4)
fixef(m_prt_collinear4)
round(fixef(m_prt_collinear4),2)
round(fixef(m_prt_linear_transform4),2)
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
meth = "linear_comb"
test_data = test_set
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
Dp_summary
round(Dp_summary,2)
meth = collinear
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
Dp_summary
meth  = "collinear"
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
Dp_summary
184/313
174/318
test_set <- c("2a", "2b", "2c")
m_prt_linear_transform2 <- compute_rt_predictions(test_set, meth = "linear_comb", m_exp1_sft, m_exp2_sft)
bs_lint <- bridge_sampler(m_prt_linear_transform, silent = TRUE)
bs_bfeat <- bridge_sampler(m_prt_best_feature2, silent = TRUE)
bs_orth <- bridge_sampler(m_prt_orthog_contrast2, silent = TRUE)
bs_col <- bridge_sampler(m_prt_collinear2, silent = TRUE)
bs_lint <- bridge_sampler(m_prt_linear_transform, silent = TRUE)
post_prob(bs_bfeat, bs_col, bs_orth)
post_prob(bs_bfeat,bs_col, bs_orth, bs_lint)
post_prob(bs_bfeat,bs_col, bs_orth, bs_lint)
post_prob(bs_col, bs_orth, bs_lint)
post_prob(bs_col, bs_lint)
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
Dp_summary
meth = "orthog_contrast"
Dp_samples %>%
filter(method == meth, exp_id %in% test_data) %>%
group_by(exp_id, d_feature) %>%
summarise(mu = mean(Dp), sigma = sd(Dp), .groups = "drop") %>%
mutate(
d_feature = as_factor(d_feature),
method = meth) -> Dp_summary
Dp_summary
Dp_samples %>% group_by(method, exp_id, d_feature) %>% summarise(sigma = sd(Dp))
Dp_samples %>% group_by(method, exp_id, d_feature) %>% summarise(sigma = sd(Dp)) %>% pivot_wider(names_from = "method", values_from = "sigma")
Dp_samples %>% group_by(method, exp_id, d_feature) %>% summarise(sigma = 1000*sd(Dp)) %>% pivot_wider(names_from = "method", values_from = "sigma")
x <- rnorm(100000)
sd(x)
x
sd(1/x)
sd(1/x + 1/x)
sd(1/(1/x + 1/x))
x1 <- rnorm(100000)
x2 <- rnorm(100000)
sd(1/(1/x + 1/x))
sd(pmin(x1, x2))
sd(1/sqrt((1/x1^2) + (1/x2^2)))
Dp_samples %>% group_by(method, exp_id, d_feature) %>% summarise(sigma = 1000*sd(Dp)) %>% pivot_wider(names_from = "method", values_from = "sigma")
sd(1/(1/x + 1/x))
mean(1/(1/x + 1/x))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mena(D1)
mean(D1)
mean(D2)
Dc
mean(Dc)
mean(Do)
mean(Do)
source('~/.active-rstudio-document', echo=TRUE)
mean(D1)
mean(D2)
sd(Dc)
sd(Db)
sd(Do)
sd(1/(1/x + 1/x))
sd(Dc)
mean(x)
sd(1/(1/x1 + 1/x2))
sd(Dc)
sd(1/sqrt((1/x1^2) + (1/x2^2)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean(Dc )
D1[1]
D2[2]
Dp_summary
D1 <- rnorm(100000)
D2 <- rnorm(100000)
Dc = 1/((1/D1) + (1/D2))
Db = pmin(D1, D2)
Do =  1/sqrt(1/(D1^2) + (1/D2^2))
sd(Dc)
sd(Db)
sd(Do)
source('~/.active-rstudio-document', echo=TRUE)
Dc
mean(Dc)
mean(Db)
mean(Do)
mean(D1)
mean(D2)
?rnorm
source('~/.active-rstudio-document', echo=TRUE)
mean(Dc)
mean(Do)
mean(Db)
