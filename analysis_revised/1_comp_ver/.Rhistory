scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
Dp_tmp <- left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(-c(exp_id, d_feature, D), names_to = "method", values_to = "Dp")
df_r2 <- tibble(exp_id = as.character(), method = as.character(), r2 = as.numeric())
for (e_id in exps_to_predict) {
for (meth in unique(Dp_tmp$method)) {
df <- filter(Dp_tmp, method == meth, exp_id == e_id)
r2 <- summary(lm(D ~ Dp, data = df))$r.squared
df_r2 <- add_row(df_r2,
exp_id = paste("Exp", e_id), method = meth, r2 = r2)
}
}
for (meth in unique(Dp_tmp$method)) {
df <- filter(Dp_tmp, method == meth)
r2 <- summary(lm(D ~ Dp, data = df))$r.squared
# print(meth)
# print(summary(lm(D ~ Dp, data = df))$r.squared)
df_r2 <- add_row(df_r2,
exp_id = "all", method = meth, r2 = r2)
}
df_r2 %>% pivot_wider(method, names_from = "exp_id", values_from = "r2") %>%
knitr::kable(digits = 4) %>% kableExtra::kable_styling()
rm(df_r2, Dp_tmp)
rt_pred_collinear <- map_dfr(exps_to_predict, predict_rt, 'collinear')
d %>% filter(exp_id %in% exps_to_predict, N_T > 0) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred_collinear, by = c("exp_id", "d_feature", "N_T")) %>%
ggplot(aes(x = p_rt, y = mean_rt, colour = "yellow1")) +
geom_point(color = "yellow1", alpha = 0.5) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
coord_cartesian(ylim=c(400, 800), xlim=c(400,800)) +
scale_x_continuous("predicted reaction time (ms)") +
scale_y_continuous("empirical mean reaction time (ms)") +
scale_colour_manual(values = "yellow1") -> collinear_plot
rt_pred_orthog <- map_dfr(exps_to_predict, predict_rt, 'orthog. contrast')
d %>% filter(exp_id %in% exps_to_predict, N_T > 0) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred_orthog, by = c("exp_id", "d_feature", "N_T")) %>%
ggplot(aes(x = p_rt, y = mean_rt, colour = "yellow1")) +
geom_point(color = "yellow1", alpha = 0.5) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
coord_cartesian(ylim=c(400, 800), xlim=c(400,800)) +
scale_x_continuous("predicted reaction time (ms)") +
scale_y_continuous("empirical mean reaction time (ms)") +
scale_colour_manual(values = "yellow1") -> orthog_plot
rt_pred_best <- map_dfr(exps_to_predict, predict_rt, 'best feature')
d %>% filter(exp_id %in% exps_to_predict, N_T > 0) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred_best, by = c("exp_id", "d_feature", "N_T")) %>%
ggplot(aes(x = p_rt, y = mean_rt, colour = "yellow1")) +
geom_point(color = "yellow1", alpha = 0.5) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
coord_cartesian(ylim=c(400, 800), xlim=c(400,800)) +
scale_x_continuous("predicted reaction time (ms)") +
scale_y_continuous("empirical mean reaction time (ms)") +
scale_colour_manual(values = "yellow1") -> best_plot
best_plot + orthog_plot + collinear_plot
# remove variables we no longer need
rm(De, Dp, rt_pred_collinear, rt_pred_orthog, rt_pred_best, exps_to_predict,
extract_a_value, extract_D, predict_rt)
De <- readRDS("tmp.model")
De %>%
mutate(
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(D, .width = 0.53) %>%
select(exp_id, d_feature, `53% lower` = ".lower", D, `53% upper` = ".upper") %>%
knitr::kable() %>% kableExtra::kable_styling()
exps_to_predict <- c("2a", "2b", "2c", "4a", "4b", "4c") #
Dp <- map_df(exps_to_predict, gen_exp_predictions, De, "Bayes")
exps_to_predict <- c("4a") #,
Dp <- map_df(exps_to_predict, gen_exp_predictions, De, "Bayes")
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear, D),
names_to = "method", values_to = "Dp") %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) -> Dp
De2 <- filter(Dp, method == "D") %>%
select(exp_id, d_feature, De = "Dp", De_lower = ".lower", De_upper = ".upper")
Dp %>% filter(method != "D") %>%
select(-.width, -.point, -.interval) %>%
full_join(De2, by = c("exp_id", "d_feature")) -> Dp
rm(De2)
ggplot(Dp, aes(x = De, xmin = De_lower, xmax = De_upper, y = Dp, ymin = .lower, ymax = .upper )) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
Dp
ggplot(Dp, aes(x = De, xmin = De_lower, xmax = De_upper, y = Dp, ymin = .lower, ymax = .upper )) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3")
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# functions used for the analysis re-implementation
source("../scripts/reimplementation.R")
De <- map_dfr(unique(d$exp_id), calc_D_per_feature) %>%
mutate(exp_id = as_factor(exp_id),
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("1a", "3a")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De %>% filter(exp_id %in% c("1b", "3b")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De <- De %>%
mutate(d_feature = fct_relevel(d_feature, "orange diamond", "orange circle", "blue diamond", "blue circle", "yellow diamond", "yellow circle", "yellow triangle",
"blue triangle", "orange triangle", "yellow semicircle", "blue semicircle", "orange semicircle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("2a", "2b", "2c", "4a", "4b", "4c")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
exps_to_predict <- c("2a", "2b", "2c", "4a", "4b", "4c")
Dp <- map_df(exps_to_predict, gen_exp_predictions, De)
left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "Dp",
names_to = "method") %>%
mutate(method = fct_relevel(method, "best feature", "orthog. contrast")) %>%
ggplot(aes(x = Dp, y = D, colour = method)) +
geom_point(color = "yellow1") +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
facet_wrap(~ method) +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
Dp_tmp <- left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(-c(exp_id, d_feature, D), names_to = "method", values_to = "Dp")
df_r2 <- tibble(exp_id = as.character(), method = as.character(), r2 = as.numeric())
for (e_id in exps_to_predict) {
for (meth in unique(Dp_tmp$method)) {
df <- filter(Dp_tmp, method == meth, exp_id == e_id)
r2 <- summary(lm(D ~ Dp, data = df))$r.squared
df_r2 <- add_row(df_r2,
exp_id = paste("Exp", e_id), method = meth, r2 = r2)
}
}
for (meth in unique(Dp_tmp$method)) {
df <- filter(Dp_tmp, method == meth)
r2 <- summary(lm(D ~ Dp, data = df))$r.squared
# print(meth)
# print(summary(lm(D ~ Dp, data = df))$r.squared)
df_r2 <- add_row(df_r2,
exp_id = "all", method = meth, r2 = r2)
}
df_r2 %>% pivot_wider(method, names_from = "exp_id", values_from = "r2") %>%
knitr::kable(digits = 4) %>% kableExtra::kable_styling()
rm(df_r2, Dp_tmp)
rt_pred_collinear <- map_dfr(exps_to_predict, predict_rt, 'collinear')
d %>% filter(exp_id %in% exps_to_predict, N_T > 0) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred_collinear, by = c("exp_id", "d_feature", "N_T")) %>%
ggplot(aes(x = p_rt, y = mean_rt, colour = "yellow1")) +
geom_point(color = "yellow1", alpha = 0.5) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
coord_cartesian(ylim=c(400, 800), xlim=c(400,800)) +
scale_x_continuous("predicted reaction time (ms)") +
scale_y_continuous("empirical mean reaction time (ms)") +
scale_colour_manual(values = "yellow1") -> collinear_plot
rt_pred_orthog <- map_dfr(exps_to_predict, predict_rt, 'orthog. contrast')
d %>% filter(exp_id %in% exps_to_predict, N_T > 0) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred_orthog, by = c("exp_id", "d_feature", "N_T")) %>%
ggplot(aes(x = p_rt, y = mean_rt, colour = "yellow1")) +
geom_point(color = "yellow1", alpha = 0.5) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
coord_cartesian(ylim=c(400, 800), xlim=c(400,800)) +
scale_x_continuous("predicted reaction time (ms)") +
scale_y_continuous("empirical mean reaction time (ms)") +
scale_colour_manual(values = "yellow1") -> orthog_plot
rt_pred_best <- map_dfr(exps_to_predict, predict_rt, 'best feature')
d %>% filter(exp_id %in% exps_to_predict, N_T > 0) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
group_by(exp_id,  d_feature, N_T) %>%
summarise(mean_rt = mean(mean_rt), .groups = "drop") %>%
left_join(rt_pred_best, by = c("exp_id", "d_feature", "N_T")) %>%
ggplot(aes(x = p_rt, y = mean_rt, colour = "yellow1")) +
geom_point(color = "yellow1", alpha = 0.5) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
coord_cartesian(ylim=c(400, 800), xlim=c(400,800)) +
scale_x_continuous("predicted reaction time (ms)") +
scale_y_continuous("empirical mean reaction time (ms)") +
scale_colour_manual(values = "yellow1") -> best_plot
best_plot + orthog_plot + collinear_plot
# remove variables we no longer need
rm(De, Dp, rt_pred_collinear, rt_pred_orthog, rt_pred_best, exps_to_predict,
extract_a_value, extract_D, predict_rt)
# De <- map_dfr(c("1a", "1b", "2a", "2b", "2c", "3a", "3b", "4a", "4b", "4c" ),
#            calc_D_per_feature, "Bayes")
#saveRDS(De, "tmp.model")
De <- readRDS("tmp.model")
De %>%
mutate(
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(D, .width = 0.53) %>%
select(exp_id, d_feature, `53% lower` = ".lower", D, `53% upper` = ".upper") %>%
knitr::kable() %>% kableExtra::kable_styling()
exps_to_predict <- c("2a", "2b", "2c", "4a", "4b", "4c") #
Dp <- map_df(exps_to_predict, gen_exp_predictions, De, "Bayes")
Dp
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter)
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) -> DpHDI
DpHDI
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53)
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53)
mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
select(-.width, -.interval)
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53)
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)
De
De %>% filter(exp_id %in% exps_to_predict)
De %>% filter(exp_id %in% exps_to_predict) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DeHDI
DeHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DeHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DpHDI
DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", DP_upper = ".upper") -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DeHDI
DeHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
DHDP <- full_join(DeHDI, DpHDI)
DHPI
DHPP
full_join(DeHDI, DpHDI)
DHDP <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDP
DHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
ungroup() %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
ungroup() %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point)  %>%
rename(De_lower = ".lower", De_upper = ".upper")  -> DeHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
DeHDI
DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point) %>%
mutate(d_feature = str_replace(d_feature, " ", "")) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point)  %>%
rename(De_lower = ".lower", De_upper = ".upper")  -> DeHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = .upper , y = De, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = Dp_upper , y = De, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = Dp_upper , y = De, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow")
DHDI
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = Dp_upper , y = D, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
