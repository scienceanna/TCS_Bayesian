group_by(method) %>%
summarise(mean_err = mean(abs(error)))
left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "Dp",
names_to = "method") %>%
mutate(method = fct_relevel(method, "best feature", "orthog. contrast"),
error = D-Dp) %>%
group_by(method) %>%
summarise(mean_err = mean(abs(error))) %>%
knitr::kable()
source('~/GitHub/TCS_Bayesian/analysis_revised/1_comp_ver/ring_model.R', echo=TRUE)
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
source("../scripts/import_and_tidy.R")
summary(d)
source("../scripts/import_and_tidy.R")
source("../scripts/import_and_tidy.R")
summary(d)
d %>% group_by(p_id, N_T, d_feature)
d %>% group_by(p_id, N_T, d_feature) %>% summarise(n = n())
unique(d$d_feature)
filter(d, str_detect("-3", p_id))
filter(d, str_detect(p_id, "-3"))
filter(d, str_detect(p_id, "3a-"))
filter(d, str_detect(p_id, "2a-"))
de <-  filter(d, str_detect(p_id, paste0(exp, "-")))
exp = "2a"
de <-  filter(d, str_detect(p_id, paste0(exp, "-")))
de %>% group_by(p_id, N_T, d_feature) %>% summarise(n = n())
de
n_trials <- 20
de <-  filter(d, str_detect(p_id, paste0(exp, "-")), trial <= n_trials)
de <-  filter(d, str_detect(p_id, paste0(exp, "-")), trial <= n_trials)
de %>% group_by(p_id, N_T, d_feature) %>% summarise(n = n())
d
View(d)
View(d)
de %>% group_by(p_id, N_T, d_feature) %>% summarise(n = n())
de <-  filter(d, str_detect(p_id, paste0(exp, "-")), trial <= n_trials)
de
de <-  filter(d, exp_id == exp, trial <= n_trials)
de
exp <- "2a"
n_trials <- 20
de <-  filter(d, exp_id == exp)
de %>% group_by(p_id, N_T, d_feature) %>% summarise(n = n())
summary(de)
source("../scripts/import_and_tidy.R") %>%
mutate(rt = rt/1000)
source("../scripts/import_and_tidy.R") %>%
mutate(rt = rt/1000,
lnd = log(N_T))
source("../scripts/import_and_tidy.R")
d %>%
mutate(rt = rt/1000,
lnd = log(N_T))
my_f <- bf(rt ~ d_feature:lnd + (d_feature:lnd|observer),
ndt ~ 1 + (1|observer))
my_inits <- list(list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10))
my_prior <- c(
prior_string("normal(-0.5, 0.3)", class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
# fit model to full dataset for exp
n_itr = 1000
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
n_chains = 4
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
exp <- "2a"
n_trials <- 20
de <-  filter(d, exp_id == exp)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
de
d %>%
mutate(rt = rt/1000,
lnd = log(N_T)) -> d
summary(d)
exp <- "2a"
n_trials <- 20
de <-  filter(d, exp_id == exp)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
my_f <- bf(rt ~ d_feature:lnd + (d_feature:lnd|p_id),
ndt ~ 1 + (1|observer))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
my_f <- bf(rt ~ d_feature:lnd + (d_feature:lnd|p_id),
ndt ~ 1 + (1|p_id))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
de
summary(de)
log(0)
d %>%
mutate(rt = rt/1000,
lnd = log(N_T+1)) -> d
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
de
summary(de)
d %>%
mutate(rt = rt/1000,
lnd = log(N_T+1)) -> d
de <-  filter(d, exp_id == exp)
summary(de)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
m
exp <- "3a"
n_trials <- 20
de <-  filter(d, exp_id == exp)
# fit model to full dataset for exp
n_itr = 1000
n_chains = 4
my_f <- bf(rt ~ d_feature:lnd + (d_feature:lnd|p_id),
ndt ~ 1 + (1|p_id))
my_inits <- list(list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10))
my_prior <- c(
prior_string("normal(-0.5, 0.3)", class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE,
sample_prior = "only"
)
m
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
my_inits <- list(list(Intercept_ndt = -10, Intercept = 1),
list(Intercept_ndt = -10, Intercept = 1),
list(Intercept_ndt = -10, Intercept = 1),
list(Intercept_ndt = -10, Intercept = 1))
my_prior <- c(
prior_string("normal(-0.5, 0.3)", class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
my_inits <- list(list(Intercept_ndt = -10, b = 1),
list(Intercept_ndt = -10, b = 1),
list(Intercept_ndt = -10, b = 1),
list(Intercept_ndt = -10, b = 1))
my_prior <- c(
prior_string("normal(-0.5, 0.3)", class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
#init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
#init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
de
sumamry(de)
summary(de)
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
d %>%
mutate(rt = rt/1000,
lnd = log(N_T+1)) -> d
summary(d)
exp <- "3a"
n_trials <- 20
de <-  filter(d, exp_id == exp)
# fit model to full dataset for exp
n_itr = 1000
n_chains = 4
my_f <- bf(rt ~ d_feature:lnd + (d_feature:lnd|p_id),
ndt ~ 1 + (1|p_id))
my_inits <- list(list(Intercept_ndt = -10, b = 1),
list(Intercept_ndt = -10, b = 1),
list(Intercept_ndt = -10, b = 1),
list(Intercept_ndt = -10, b = 1))
my_prior <- c(
prior_string("normal(-0.5, 0.3)", class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
#init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# now run model
m <- brm(
my_f,
data = de,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
init = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
m
saveRDS(m, "all_people_exp3a.rds")
de %>% unite(t, N_T, d_feature, trial)
de %>% unite(t, N_T, d_feature, trial) %>%
mutate(as_factor(t))
de %>% unite(t, N_T, d_feature, trial) %>%
mutate(t = as_factor(t))
de %>% unite(t, N_T, d_feature, trial) %>%
mutate(t = as_factor(t),
t = as.numeric(t))
de %>% unite(t, N_T, d_feature, trial) %>%
mutate(trial = as_factor(t),
t = as.numeric(t))
de %>% unite(trial, N_T, d_feature, trial) %>%
mutate(trial = as_factor(trial),
trial = as.numeric(trial))
de %>% unite(trial, N_T, d_feature, t) %>%
mutate(trial = as_factor(trial),
trial = as.numeric(trial))
de %>% unite(trial, N_T, d_feature, t)
de
de %>% unite(t, N_T, d_feature, trial)
?unite
de %>% unite("t", N_T, d_feature, trial)
de %>% unite("t", N_T, d_feature, trial, remove = FALSE)
de %>% unite("t", N_T, d_feature, trial, remove = FALSE) %>%
mutate(t = as_factor(t),
t = as.numeric(t))
de %>% unite("t", N_T, d_feature, trial, remove = FALSE) %>%
mutate(t = as_factor(t)) -> dt
dt
levels(dt$t)
?as_factor
de %>% unite("t", p_id, N_T, d_feature, trial, remove = FALSE) %>%
mutate(t = as_factor(t, ordered = TRUE)) -> dt
levels(dt$t)
de %>% unite("t", p_id, N_T, d_feature, trial, remove = FALSE) %>%
mutate(t = as.factor(t)) -> dt
levels(dt$t)
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
install.packages("rlang")
library(tidyverse)
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
d
