d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter)
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) -> DpHDI
DpHDI
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp")
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53)
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53)
mutate(
d_feature2 = d_feature,
d_feature = str_replace(d_feature, " ", "")) %>%
full_join(filter(De, exp_id %in% exps_to_predict), by = c("exp_id", "d_feature", "iter")) %>%
mutate(d_feature = d_feature2) %>%
select(-d_feature2, -iter) %>%
select(-.width, -.interval)
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53)
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)
De
De %>% filter(exp_id %in% exps_to_predict)
De %>% filter(exp_id %in% exps_to_predict) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DeHDI
DeHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DeHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DpHDI
DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", DP_upper = ".upper") -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point)  -> DeHDI
DeHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
DHDP <- full_join(DeHDI, DpHDI)
DHPI
DHPP
full_join(DeHDI, DpHDI)
DHDP <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDP
DHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
ungroup() %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
ungroup() %>%
mean_hdci(.width = 0.53) %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point)  %>%
rename(De_lower = ".lower", De_upper = ".upper")  -> DeHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
DeHDI
DpHDI
Dp %>% pivot_longer(
c(`best feature`, `orthog. contrast`, collinear),
names_to = "method", values_to = "Dp") %>%
select(-iter) %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point) %>%
mutate(d_feature = str_replace(d_feature, " ", "")) %>%
rename(Dp_lower = ".lower", Dp_upper = ".upper") -> DpHDI
De %>% filter(exp_id %in% exps_to_predict) %>%
select(-iter) %>%
group_by(exp_id, d_feature) %>%
mean_hdci(.width = 0.53) %>%
ungroup() %>%
select(-.width, -.interval, -.point)  %>%
rename(De_lower = ".lower", De_upper = ".upper")  -> DeHDI
DHDI <- full_join(DeHDI, DpHDI, by = c("exp_id", "d_feature"))
DHDI
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = .upper , y = De, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = Dp_upper , y = De, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = Dp_upper , y = De, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow")
DHDI
ggplot(DHDI, aes(x = Dp, xmin = Dp_lower, xmax = Dp_upper , y = D, ymin = De_lower, ymax = De_upper)) +
geom_errorbar(colour = "yellow") + geom_errorbarh(colour = "yellow") + facet_wrap(~method) +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10))
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# functions used for the analysis re-implementation
source("../scripts/reimplementation.R")
De <- map_dfr(unique(d$exp_id), calc_D_per_feature) %>%
mutate(exp_id = as_factor(exp_id),
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("1a", "3a")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De %>% filter(exp_id %in% c("1b", "3b")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De <- De %>%
mutate(d_feature = fct_relevel(d_feature, "orange diamond", "orange circle", "blue diamond", "blue circle", "yellow diamond", "yellow circle", "yellow triangle",
"blue triangle", "orange triangle", "yellow semicircle", "blue semicircle", "orange semicircle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("2a", "2b", "2c", "4a", "4b", "4c")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
exps_to_predict <- c("2a", "2b", "2c", "4a", "4b", "4c")
Dp <- map_df(exps_to_predict, gen_exp_predictions, De)
left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "Dp",
names_to = "method") %>%
mutate(method = fct_relevel(method, "best feature", "orthog. contrast")) %>%
ggplot(aes(x = Dp, y = D, colour = method)) +
geom_point(color = "yellow1") +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
facet_wrap(~ method) +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
Dp_tmp <- left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(-c(exp_id, d_feature, D), names_to = "method", values_to = "Dp")
df_r2 <- tibble(exp_id = as.character(), method = as.character(), r2 = as.numeric())
df_r2
exps_to_predict
meth = "collinear"
df <- filter(Dp_tmp, method == meth)
df
df %>% mutate(abs_err = abs(Dp - D))
df %>% mutate(abs_err = abs(Dp - D)) %>% group_by()
Dp_tmp
Dp_tmp %>% mutate(abs_err = abs(Dp-D))
Dp_tmp %>% mutate(abs_err = abs(Dp-D)) %>%
group_by(method) %>%
summarise(mean_abs_err = mean(abs_err))
Dp_tmp
tail(Dp_tmp)
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
Dp_tmp <- left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(-c(exp_id, d_feature, D), names_to = "method", values_to = "Dp")
Dp_tmp <- left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(-c(exp_id, d_feature, D), names_to = "method", values_to = "Dp")
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# functions used for the analysis re-implementation
source("../scripts/reimplementation.R")
De <- map_dfr(unique(d$exp_id), calc_D_per_feature) %>%
mutate(exp_id = as_factor(exp_id),
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("1a", "3a")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De
calc_D_per_feature("1a")
experiment = "1a"
d %>%
filter(exp_id == experiment) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
mutate(d_feature = fct_drop(d_feature)) -> df
n_feat <- length(levels(df$d_feature))
m <- lm(mean_rt ~  0 + d_feature + log(N_T+1):d_feature, df)
coef_tab <- summary(m)$coefficients
coef_tab
coef_tab[(n_feat+1):(2*n_feat),1]
coef_tab[(1):(n_feat),1]
calc_D_per_feature <- function(experiment, approach = "freq") {
d %>%
filter(exp_id == experiment) %>%
group_by(exp_id, p_id, d_feature, N_T) %>%
summarise(mean_rt = mean(rt), .groups = "drop") %>%
mutate(d_feature = fct_drop(d_feature)) -> df
n_feat <- length(levels(df$d_feature))
if (approach == "freq") {
m <- lm(mean_rt ~  0 + d_feature + log(N_T+1):d_feature, df)
coef_tab <- summary(m)$coefficients
d_out <- tibble(
exp_id = experiment,
d_feature = levels(df$d_feature),
D = c(coef_tab[(n_feat+1):(2*n_feat),1]),
a = coef_tab[(1):(n_feat),1])
}
else if (approach == "Bayes") {
intercepts = paste("d_feature", str_replace(unique(df$d_feature), " ", ""), sep = "")
my_prior <- c(
prior_string("normal(0, 50)", class = "b"),
prior_string("normal(500, 100)", class = "b", coef = intercepts),
prior_string("normal(0, 50)", class = "sigma"))
m <- brm(mean_rt ~  0 + d_feature + log(N_T+1):d_feature,
data = df,
prior = my_prior,
iter = 500,
chains = 1,
refresh = 0)
# get the slopes from the model
slopes <- str_subset(get_variables(m), "b_d_[a-z]*:")
d_out <- posterior_samples(m, slopes) %>%
mutate(iter = 1:n()) %>%
pivot_longer(starts_with("b_d"), names_to = "d_feature", values_to = "D") %>%
mutate(
exp_id = experiment,
d_feature = str_remove(d_feature, "b_d_feature"),
d_feature = str_remove(d_feature, ":logN_TP1"),
d_feature = as_factor(d_feature)) %>%
select(exp_id, d_feature, iter, D)
}
rm(m)
return(d_out)
}
De <- map_dfr(unique(d$exp_id), calc_D_per_feature) %>%
mutate(exp_id = as_factor(exp_id),
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("1a", "3a")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# functions used for the analysis re-implementation
source("../scripts/reimplementation.R")
De <- map_dfr(unique(d$exp_id), calc_D_per_feature) %>%
mutate(exp_id = as_factor(exp_id),
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature)
De
De %>% filter(exp_id %in% c("1a", "3a")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De %>% filter(exp_id %in% c("1b", "3b")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De <- De %>%
mutate(d_feature = fct_relevel(d_feature, "orange diamond", "orange circle", "blue diamond", "blue circle", "yellow diamond", "yellow circle", "yellow triangle",
"blue triangle", "orange triangle", "yellow semicircle", "blue semicircle", "orange semicircle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("2a", "2b", "2c", "4a", "4b", "4c")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
library(ggpmisc)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = 4)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# functions used for the analysis re-implementation
source("../scripts/reimplementation.R")
De <- map_dfr(unique(d$exp_id), calc_D_per_feature) %>%
mutate(exp_id = as_factor(exp_id),
d_feature = as_factor(d_feature),
d_feature = fct_relevel(d_feature, "yellow", "orange", "blue", "triangle", "semicircle", "diamond", "circle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("1a", "3a")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De %>% filter(exp_id %in% c("1b", "3b")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
De <- De %>%
mutate(d_feature = fct_relevel(d_feature, "orange diamond", "orange circle", "blue diamond", "blue circle", "yellow diamond", "yellow circle", "yellow triangle",
"blue triangle", "orange triangle", "yellow semicircle", "blue semicircle", "orange semicircle")) %>%
arrange(exp_id, d_feature)
De %>% filter(exp_id %in% c("2a", "2b", "2c", "4a", "4b", "4c")) %>%
knitr::kable(digits = 1) %>% kableExtra::kable_styling()
exps_to_predict <- c("2a", "2b", "2c", "4a", "4b", "4c")
Dp <- map_df(exps_to_predict, gen_exp_predictions, De)
left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(
cols = c(`best feature`, `orthog. contrast`, collinear),
values_to = "Dp",
names_to = "method") %>%
mutate(method = fct_relevel(method, "best feature", "orthog. contrast")) %>%
ggplot(aes(x = Dp, y = D, colour = method)) +
geom_point(color = "yellow1") +
geom_abline(linetype = 2, colour = "cyan") +
geom_smooth(method = "lm", formula = y ~ x, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4) +
facet_wrap(~ method) +
scale_x_continuous("predicted D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_y_continuous("empirical D", limits = c(0, 90), breaks = seq(0, 90, 10)) +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
Dp_tmp <- left_join(Dp, De, by = c("exp_id", "d_feature")) %>%
pivot_longer(-c(exp_id, d_feature, D), names_to = "method", values_to = "Dp")
Dp_tmp
debugSource('~/GitHub/TCS_Bayesian/analysis/create_plots_for_paper.R', echo=TRUE)
