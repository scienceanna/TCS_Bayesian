group_by(method) %>%
summarise(mean_abs_err = mean(abs_err))
full_join(s1, s2)
Dp_lines %>% group_by(method) %>%
summarise(intercept = median(intercept),
slope = median(slope),
r2 = median(r2)) -> s1
Dp_samples %>% group_by(method, exp_id, d_feature) %>%
summarise(mean_De = mean(De), mean_Dp = mean(Dp), .groups = "drop") %>%
mutate(abs_err = abs(mean_De - mean_Dp)) %>%
group_by(method) %>%
summarise(mean_abs_err = mean(abs_err)) -> s2
full_join(s1, s2)
full_join(s1, s2, by = "method")
full_join(s1, s2, by = "method") %>% knitr::kable()
1-0.1934
df
nl <- length( levels(df$method) )
nl
nl <- length( levels(df$method) )
for (m in levels(df$method)) {
dd <- filter(df, method == meth)
my_lm = lm(De ~  Dp, df)
}
for (m in levels(df$method)) {
dd <- filter(df, method == m)
my_lm = lm(De ~  Dp, df)
}
summary(my_lm)$coefficients
summary(my_lm)$coefficients[1,1]
summary(my_lm)$coefficients[2,1]
summary(my_lm)$r.squared
d_out <- tibble()
for (m in levels(df$method)) {
dd <- filter(df, method == m)
my_lm = lm(De ~  Dp, df)
d_out <- bind_rows(d_out,
tibble(method = m,
intercept = summary(my_lm)$coefficients[1,1],
slopes = summary(my_lm)$coefficients[2,1],
r2 = summary(my_lm)$r.squared))
}
d_out
d_out <- tibble()
for (m in levels(df$method)) {
dd <- filter(df, method == m)
my_lm = lm(De ~  Dp, dd)
d_out <- bind_rows(d_out,
tibble(method = m,
intercept = summary(my_lm)$coefficients[1,1],
slopes = summary(my_lm)$coefficients[2,1],
r2 = summary(my_lm)$r.squared))
}
d_out
source('~/GitHub/TCS_Bayesian/analysis_revised/scripts/our_functions.R', echo=TRUE)
Dp_lines <- get_Dp_lines(Dp_samples)
Dp_lines
Dp_lines %>% group_by(method) %>%
summarise(intercept = median(intercept),
slope = median(slope),
r2 = median(r2)) -> s1
source('~/GitHub/TCS_Bayesian/analysis_revised/scripts/our_functions.R', echo=TRUE)
Dp_lines <- get_Dp_lines(Dp_samples)
Dp_lines %>% group_by(method) %>%
summarise(intercept = median(intercept),
slope = median(slope),
r2 = median(r2)) -> s1
Dp_samples %>% group_by(method, exp_id, d_feature) %>%
summarise(mean_De = mean(De), mean_Dp = mean(Dp), .groups = "drop") %>%
mutate(abs_err = abs(mean_De - mean_Dp)) %>%
group_by(method) %>%
summarise(mean_abs_err = mean(abs_err)) -> s2
full_join(s1, s2, by = "method") %>% knitr::kable()
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = parallel::detectCores())
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# switch from ms to seconds
# recode experiment as 1, 2, 3 and 4
# remove outlier RTs
d <- our_changes_to_data(d)
prior_model_nrl <- readRDS("models/prior_nrl.models")
prior_model_log <- readRDS("models/prior_log.models")
prior_model_sft <- readRDS("models/prior_sft.models")
training_models = c("1a", "1b")
plt_nrl <- plot_model_fits_rt(training_models, prior_model_nrl, y_limits = c(-2, 10),feature2plot = "all")
plt_log <- plot_model_fits_rt(training_models, prior_model_log, y_limits = c(0, 10), feature2plot = "all")
plt_sft <- plot_model_fits_rt(training_models, prior_model_sft, y_limits = c(0, 10), feature2plot = "all")
plt_nrl / plt_log / plt_sft
# tidy up, we no longer need to keep hold of these models and plots
rm(
prior_model_nrl,
prior_model_log,
prior_model_sft,
plt_nrl, plt_log, plt_sft)
m_exp1_nrl <- readRDS("models/exp_1_nrl.models")
m_exp1_log <- readRDS("models/exp_1_log.models")
m_exp1_sft <- readRDS("models/exp_1_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "predicted", y_limits = c(0, 2.5))
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "predicted", y_limits = c(0, 2.5))
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "predicted", y_limits = c(0, 2.5))
# plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
bs_exp1_nrl <- bridge_sampler(m_exp1_nrl, silent = TRUE)
bs_exp1_log <- bridge_sampler(m_exp1_log, silent = TRUE)
bs_exp1_sft <- bridge_sampler(m_exp1_sft, silent = TRUE)
#bs_exp1_sft_nolog <- bridge_sampler(m_exp1_sft_nolog, silent = TRUE)
tibble(model = c("normal", "lognormal", "shifted-lognormal"), #, "linear in $N_T$"
weight = post_prob(bs_exp1_nrl, bs_exp1_log, bs_exp1_sft)) %>% # , bs_exp1_sft_nolog
knitr::kable()
#remove the models that we no longer need
rm(m_exp1_nrl, m_exp1_log, m_exp1_sft_nolog)
summary(m_exp1_sft)
plot(m_exp1_sft, pars = "^b_")
m_exp3_nrl <- readRDS("models/exp_3_nrl.models")
m_exp3_log <- readRDS("models/exp_3_log.models")
m_exp3_sft <- readRDS("models/exp_3_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
training_models = c("3a", "3b")
plt_nrl <- plot_model_fits_rt(training_models, m_exp3_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp3_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp3_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp3_nrl, plot_type = "predicted", y_limits = c(0, 2))
plt_log <- plot_model_fits_rt(training_models, m_exp3_log, plot_type = "predicted", y_limits = c(0, 2))
plt_sft <- plot_model_fits_rt(training_models, m_exp3_sft, plot_type = "predicted", y_limits = c(0, 2))
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft# / plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
bs_exp1_nrl <- bridge_sampler(m_exp3_nrl, silent = TRUE)
bs_exp1_log <- bridge_sampler(m_exp3_log, silent = TRUE)
bs_exp1_sft <- bridge_sampler(m_exp3_sft, silent = TRUE)
#bs_exp1_sft_nolog <- bridge_sampler(m_exp1_sft_nolog, silent = TRUE)
tibble(model = c("normal", "lognormal", "shifted-lognormal"), #, "linear in $N_T$"
weight = post_prob(bs_exp1_nrl, bs_exp1_log, bs_exp1_sft)) %>% # , bs_exp1_sft_nolog
knitr::kable()
#remove the models that we no longer need
rm(m_exp1_nrl, m_exp1_log, m_exp1_sft_nolog)
#load previously fitted models
m_exp2_sft <- readRDS("models/exp_2_sft.models")
m_exp4_sft <- readRDS("models/exp_4_sft.models")
slopes1 <- extract_fixed_slopes_from_model(m_exp1_sft)
slopes1nrl <- extract_fixed_slopes_from_model(m_exp1_nrl)
m_exp1_nrl <- readRDS("models/exp_1_nrl.models")
slopes1nrl <- extract_fixed_slopes_from_model(m_exp1_nrl)
slopes1
slopes1nrl
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes1nrl %>% mutate(exp = "Experiment 3", dist = "nrl"))
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes1nrl %>% mutate(exp = "Experiment 3", dist = "nrl")) -> l
tail(l)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "nrl")) %>%
select(-iter) %>%
group_by(d_feature, dist) %>%
median_hdci()
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "nrl")) %>%
select(-iter) %>%
group_by(d_feature, dist) %>%
median_hdci(D)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "sft")) %>%
select(-iter) %>%
group_by(d_feature, dist) %>%
median_hdci(D)
slopes3 <- extract_fixed_slopes_from_model(m_exp3_sft)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "sft")) %>%
select(-iter) %>%
group_by(d_feature, dist) %>%
median_hdci(D)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "sft")) %>%
select(-iter) %>%
group_by(d_feature, exp) %>%
median_hdci(D) %>%
rename(sft = "D", x_min = ".lower", x_max = ".upper")
bind_rows(
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes3nrl %>% mutate(exp = "Experiment 3", dist = "sft")) %>%
select(-iter) %>%
group_by(d_feature, exp) %>%
median_hdci(D) %>%
rename(nrl = "D", y_min = ".lower", y_max = ".upper") -> d_nrl
slopes3nrl <- extract_fixed_slopes_from_model(m_exp3_nrl)
bind_rows(
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes3nrl %>% mutate(exp = "Experiment 3", dist = "sft")) %>%
select(-iter) %>%
group_by(d_feature, exp) %>%
median_hdci(D) %>%
rename(nrl = "D", y_min = ".lower", y_max = ".upper") -> d_nrl
n_nrl
d_nrl
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "sft"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "sft")) %>%
select(-iter) %>%
group_by(d_feature, exp) %>%
median_hdci(D) %>%
rename(sft = "D", x_min = ".lower", x_max = ".upper") -> d_sft
full_join(d_sft, d_nrl)
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, y_max = y_max) + geom_point()
full_join(d_sft, d_nrl) %>%
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, y_max = y_max)) + geom_point()
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, y_max = y_max, colour = exp)) + geom_point()
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, y_max = y_max, colour = exp)) +
geom_point() + geom_errorbar()
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, ymax = y_max, colour = exp)) +
geom_point() + geom_errorbar()
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, ymax = y_max, colour = exp)) +
geom_point() + geom_errorbar() + geom_errorbarh()
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, ymax = y_max, colour = exp)) +
geom_point() + geom_errorbar() + geom_errorbarh() + geom_smooth()
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, ymax = y_max, colour = exp)) +
geom_point() + geom_errorbar() + geom_errorbarh() + geom_smooth(method = "lm")
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, ymax = y_max, colour = d_feature)) +
geom_point() + geom_errorbar() + geom_errorbarh() + geom_smooth(method = "lm")
full_join(d_sft, d_nrl) %>%
ggplot(aes(x = sft, xmin = x_min, xmax = x_max, y = nrl, ymin = y_min, ymax = y_max, colour = exp)) +
geom_point() + geom_errorbar() + geom_errorbarh() + geom_smooth(method = "lm")
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1"),
slopes3 %>% mutate(exp = "Experiment 3")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(~exp, nrow = 2)
bind_rows(
slopes1nrl %>% mutate(exp = "Experiment 1"),
slopes3nrl %>% mutate(exp = "Experiment 3")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(~exp, nrow = 2)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "shifted-lognormal"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "shifted-lognormal"),
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "normal"),
slopes3nrl %>% mutate(exp = "Experiment 3", dist = "normal")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(dist~exp, nrow = 2)
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "shifted-lognormal"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "shifted-lognormal"),
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "normal"),
slopes3nrl %>% mutate(exp = "Experiment 3", dist = "normal")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(dist~exp, nrow = 2, scales = "free_x")
bind_rows(
slopes1 %>% mutate(exp = "Experiment 1", dist = "shifted-lognormal"),
slopes3 %>% mutate(exp = "Experiment 3", dist = "shifted-lognormal"),
slopes1nrl %>% mutate(exp = "Experiment 1", dist = "normal"),
slopes3nrl %>% mutate(exp = "Experiment 3", dist = "normal")) %>%
ggplot(aes(x= D, fill = d_feature)) +
geom_density(alpha = 0.5) +
facet_wrap(dist~exp, nrow = 2, scales = "free")
slopes1
slopes1nrl <- extract_fixed_slopes_from_model(m_exp1_nrl)
slopes2nrl <- extract_fixed_slopes_from_model(m_exp2_nrl)
m_exp1_nrl <- readRDS("models/exp_1_nrl.models")
m_exp2_nrl <- readRDS("models/exp_2_nrl.models")
m_exp3_nrl <- readRDS("models/exp_3_nrl.models")
m_exp4_nrl <- readRDS("models/exp_4_nrl.models")
slopes1nrl <- extract_fixed_slopes_from_model(m_exp1_nrl)
slopes2nrl <- extract_fixed_slopes_from_model(m_exp2_nrl)
slopes3nrl <- extract_fixed_slopes_from_model(m_exp3_nrl)
slopes4nrl <- extract_fixed_slopes_from_model(m_exp4_nrl)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1nrl, slopes2nrl)
Dp_samples4 <- map_dfr(c("4a", "4b", "4c"), get_Dp_samples, d, slopes3nrl, slopes4nrl)
Dp_samples <- bind_rows(Dp_samples2, Dp_samples4)
Dp_lines <- get_Dp_lines(Dp_samples)
plot_Dp_lines(Dp_lines)
plot_Dp_lines <- function(Dp_lines, dot_col = "yellow1", xyline_col = "cyan", nrl = FALSE) {
# x_range = 0.25
# bind_rows(Dp_lines %>% mutate(x = 0, .lower = 0, .upper = 0),
# Dp_lines %>% mutate(x = x_range, .lower = x * .lower, .upper = x * .upper)) -> Dp_lines
if (nrl) {
axis_max = 0.25
} else {
axis_max = 0.10
}
Dp_samples %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(Dp, De) %>%
ggplot() +
geom_abline(linetype = 2, colour = xyline_col) +
geom_point(aes(x = Dp, y = De), color = dot_col) +
geom_linerange(aes(x = Dp, ymin = De.lower, ymax = De.upper), color = dot_col) +
# geom_linerange(aes(y = De, xmin = Dp.lower, xmax = Dp.upper), color = dot_col) +
geom_abline(data = Dp_lines, aes(intercept = intercept, slope = slope), colour = "palevioletred1", alpha = 0.1) +
facet_wrap(~method, nrow = 1) +
# geom_ribbon(data = Dp_lines, aes(x = x,  ymin = .lower, ymax=  .upper), alpha = 0.5, fill = "palevioletred1") +
coord_fixed(xlim = c(0, axis_max), ylim = c(0, axis_max)) +
scale_x_continuous(TeX("Predicted value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2)) +
scale_y_continuous(TeX("empirical value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2))
}
plot_Dp_lines(Dp_lines, nrl = TRUE)
plot_Dp_lines(Dp_lines, nrl = TRUE)
plot_Dp_lines <- function(Dp_lines, dot_col = "yellow1", xyline_col = "cyan", nrl = FALSE) {
# x_range = 0.25
# bind_rows(Dp_lines %>% mutate(x = 0, .lower = 0, .upper = 0),
# Dp_lines %>% mutate(x = x_range, .lower = x * .lower, .upper = x * .upper)) -> Dp_lines
if (nrl) {
axis_max = 0.25
} else {
axis_max = 0.10
}
Dp_samples %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(Dp, De) %>%
ggplot() +
geom_abline(linetype = 2, colour = xyline_col) +
geom_point(aes(x = Dp, y = De), color = dot_col) +
geom_linerange(aes(x = Dp, ymin = De.lower, ymax = De.upper), color = dot_col) +
# geom_linerange(aes(y = De, xmin = Dp.lower, xmax = Dp.upper), color = dot_col) +
geom_abline(data = Dp_lines, aes(intercept = intercept, slope = slope), colour = "palevioletred1", alpha = 0.1) +
facet_wrap(~method, nrow = 1) +
# geom_ribbon(data = Dp_lines, aes(x = x,  ymin = .lower, ymax=  .upper), alpha = 0.5, fill = "palevioletred1") +
coord_fixed(xlim = c(0, axis_max), ylim = c(0, axis_max)) +
scale_x_continuous(TeX("Predicted value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2)) +
scale_y_continuous(TeX("empirical value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2))
}
plot_Dp_lines(Dp_lines, nrl = TRUE)
plot_Dp_lines <- function(Dp_lines, dot_col = "yellow1", xyline_col = "cyan", nrl = FALSE) {
# x_range = 0.25
# bind_rows(Dp_lines %>% mutate(x = 0, .lower = 0, .upper = 0),
# Dp_lines %>% mutate(x = x_range, .lower = x * .lower, .upper = x * .upper)) -> Dp_lines
if (nrl) {
axis_max = 0.10
} else {
axis_max = 0.25
}
Dp_samples %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(Dp, De) %>%
ggplot() +
geom_abline(linetype = 2, colour = xyline_col) +
geom_point(aes(x = Dp, y = De), color = dot_col) +
geom_linerange(aes(x = Dp, ymin = De.lower, ymax = De.upper), color = dot_col) +
# geom_linerange(aes(y = De, xmin = Dp.lower, xmax = Dp.upper), color = dot_col) +
geom_abline(data = Dp_lines, aes(intercept = intercept, slope = slope), colour = "palevioletred1", alpha = 0.1) +
facet_wrap(~method, nrow = 1) +
# geom_ribbon(data = Dp_lines, aes(x = x,  ymin = .lower, ymax=  .upper), alpha = 0.5, fill = "palevioletred1") +
coord_fixed(xlim = c(0, axis_max), ylim = c(0, axis_max)) +
scale_x_continuous(TeX("Predicted value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2)) +
scale_y_continuous(TeX("empirical value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2))
}
rm(slopes1, slopes2, slopes3, slopes4)
plot_Dp_lines(Dp_lines, nrl = TRUE)
plot_Dp_lines <- function(Dp_lines, dot_col = "yellow1", xyline_col = "cyan", nrl = FALSE) {
# x_range = 0.25
# bind_rows(Dp_lines %>% mutate(x = 0, .lower = 0, .upper = 0),
# Dp_lines %>% mutate(x = x_range, .lower = x * .lower, .upper = x * .upper)) -> Dp_lines
if (nrl) {
axis_max = 0.08
} else {
axis_max = 0.25
}
Dp_samples %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(Dp, De) %>%
ggplot() +
geom_abline(linetype = 2, colour = xyline_col) +
geom_point(aes(x = Dp, y = De), color = dot_col) +
geom_linerange(aes(x = Dp, ymin = De.lower, ymax = De.upper), color = dot_col) +
# geom_linerange(aes(y = De, xmin = Dp.lower, xmax = Dp.upper), color = dot_col) +
geom_abline(data = Dp_lines, aes(intercept = intercept, slope = slope), colour = "palevioletred1", alpha = 0.1) +
facet_wrap(~method, nrow = 1) +
# geom_ribbon(data = Dp_lines, aes(x = x,  ymin = .lower, ymax=  .upper), alpha = 0.5, fill = "palevioletred1") +
coord_fixed(xlim = c(0, axis_max), ylim = c(0, axis_max)) +
scale_x_continuous(TeX("Predicted value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2)) +
scale_y_continuous(TeX("empirical value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2))
}
plot_Dp_lines(Dp_lines, nrl = TRUE)
plot_Dp_lines <- function(Dp_lines, dot_col = "yellow1", xyline_col = "cyan", nrl = FALSE) {
# x_range = 0.25
# bind_rows(Dp_lines %>% mutate(x = 0, .lower = 0, .upper = 0),
# Dp_lines %>% mutate(x = x_range, .lower = x * .lower, .upper = x * .upper)) -> Dp_lines
if (nrl) {
axis_max = 0.07
} else {
axis_max = 0.25
}
Dp_samples %>%
group_by(exp_id, d_feature, method) %>%
mean_hdci(Dp, De) %>%
ggplot() +
geom_abline(linetype = 2, colour = xyline_col) +
geom_point(aes(x = Dp, y = De), color = dot_col) +
geom_linerange(aes(x = Dp, ymin = De.lower, ymax = De.upper), color = dot_col) +
# geom_linerange(aes(y = De, xmin = Dp.lower, xmax = Dp.upper), color = dot_col) +
geom_abline(data = Dp_lines, aes(intercept = intercept, slope = slope), colour = "palevioletred1", alpha = 0.1) +
facet_wrap(~method, nrow = 1) +
# geom_ribbon(data = Dp_lines, aes(x = x,  ymin = .lower, ymax=  .upper), alpha = 0.5, fill = "palevioletred1") +
coord_fixed(xlim = c(0, axis_max), ylim = c(0, axis_max)) +
scale_x_continuous(TeX("Predicted value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2)) +
scale_y_continuous(TeX("empirical value for $D_{c,s}$"), expand = c(0, 0), breaks = c(0, 0.1, 0.2))
}
plot_Dp_lines(Dp_lines, nrl = TRUE)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
slopes2 <- extract_fixed_slopes_from_model(m_exp2_sft)
slopes3 <- extract_fixed_slopes_from_model(m_exp3_sft)
slopes4 <- extract_fixed_slopes_from_model(m_exp4_sft)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
slopes1 <- extract_fixed_slopes_from_model(m_exp1_sft)
Dp_samples2 <- map_dfr(c("2a", "2b", "2c"), get_Dp_samples, d, slopes1, slopes2)
Dp_samples4 <- map_dfr(c("4a", "4b", "4c"), get_Dp_samples, d, slopes3, slopes4)
Dp_samples <- bind_rows(Dp_samples2, Dp_samples4)
Dp_lines <- get_Dp_lines(Dp_samples)
plot_Dp_lines(Dp_lines)
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
library(latex2exp)
# set ggplot2 theme
theme_set(see::theme_abyss())
# use parallel cores for mcmc chains!
options(mc.cores = parallel::detectCores())
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
source("../scripts/import_and_tidy.R")
summary(d)
# switch from ms to seconds
# recode experiment as 1, 2, 3 and 4
# remove outlier RTs
d <- our_changes_to_data(d)
prior_model_nrl <- readRDS("models/prior_nrl.models")
prior_model_log <- readRDS("models/prior_log.models")
prior_model_sft <- readRDS("models/prior_sft.models")
training_models = c("1a", "1b")
plt_nrl <- plot_model_fits_rt(training_models, prior_model_nrl, y_limits = c(-2, 10),feature2plot = "all")
plt_log <- plot_model_fits_rt(training_models, prior_model_log, y_limits = c(0, 10), feature2plot = "all")
plt_sft <- plot_model_fits_rt(training_models, prior_model_sft, y_limits = c(0, 10), feature2plot = "all")
plt_nrl / plt_log / plt_sft
# tidy up, we no longer need to keep hold of these models and plots
rm(
prior_model_nrl,
prior_model_log,
prior_model_sft,
plt_nrl, plt_log, plt_sft)
m_exp1_nrl <- readRDS("models/exp_1_nrl.models")
m_exp1_log <- readRDS("models/exp_1_log.models")
m_exp1_sft <- readRDS("models/exp_1_sft.models")
#m_exp1_sft_nolog <- readRDS("models/exp_1_3_sft_nolog.models")
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "fitted")
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "fitted")
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "fitted")
#plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "fitted")
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
plt_nrl <- plot_model_fits_rt(training_models, m_exp1_nrl, plot_type = "predicted", y_limits = c(0, 2.5))
plt_log <- plot_model_fits_rt(training_models, m_exp1_log, plot_type = "predicted", y_limits = c(0, 2.5))
plt_sft <- plot_model_fits_rt(training_models, m_exp1_sft, plot_type = "predicted", y_limits = c(0, 2.5))
# plt_sft_nolog <- plot_model_fits_rt(1, m_exp1_sft_nolog, plot_type = "predicted", y_limits = c(0, 2.5))
plt_nrl / plt_log / plt_sft #/ plt_sft_nolog
rm(plt_nrl, plt_log, plt_sft, plt_sft_nolog)
waic(m_exp1_nrl, m_exp1_log, m_exp1_sft)
waic(m_exp1_nrl, m_exp1_log, m_exp1_sft, cores = 1)
