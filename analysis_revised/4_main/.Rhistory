samples_rf
m1 <- readRDS("exp1_ring_more_random.model")
source("get_slopes_fun.R")
slopes1 <- get_slopes(m1, 1, TRUE)
slopes1
slopes1 %>% mutate(feature = str_remove(feature, "feature"))
slopes2 <-  get_slopes(m2, 1, TRUE)
m2 <- readRDS("exp2_ring_more_random.model")
slopes2 <-  get_slopes(m2, 1, TRUE)
slopes2
slopes1
slopes1 %>% mutate(feature = str_remove(feature, "feature")) %>% slopes1
slopes1 <- get_slopes(m1, 1, TRUE)
slopes1
slopes1 %>% mutate(feature = str_remove(feature, "feature")) %>% slopes1
slopes1 %>% mutate(feature = str_remove(feature, "feature"))
slopes1 %>% mutate(feature = str_remove(feature, "feature")) %>% slopes1
slopes2 %>% mutate(feature = str_remove(feature, "feature")) %>% slopes1
slopes2
slopes2 %>% mutate(feature = str_remove(feature, "feature")) %>% slopes1
slopes1 %>% mutate(feature = str_remove(feature, "feature")) -> slopes1
slopes2 %>% mutate(feature = str_remove(feature, "feature")) -> slopes2
slopes1
slopes2
slopes2 %>% mutate(feature1 = str_extract(feature, "orange", "pink", "purple"),
feature2 = str_extract(feature, "circle", "diamond", "circle")) -> slopes2
slopes2 %>% mutate(feature1 = str_extract(feature, "orange|pink|purple"),
feature2 = str_extract(feature, "circle|diamond|circle")) -> slopes2
slopes2
return(tibble(.draw = 1:4000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
calc_D <- function(feature1, feature2) {
D1 <- filter(samples1, feature == feature1)$D
D2 <- filter(samples1, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:4000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>%
distinct() %>%
separate(feature, c("feature1", "feature2"))
samples2 <- get_slopes(m2, 1, TRUE) %>%
select(-observer, -rD) %>%
distinct() %>%
mutate(feature = str_remove(feature, "feature"),
feature1 = str_extract(feature, "orange|pink|purple"),
feature2 = str_extract(feature, "circle|diamond|circle")) -> slopes2
samples2
samples2 <- get_slopes(m2, 1, TRUE) %>%
select(-observer, -rD) %>%
distinct() %>%
mutate(feature = str_remove(feature, "feature"),
feature1 = str_extract(feature, "orange|pink|purple"),
feature2 = str_extract(feature, "circle|diamond|triangle"))
calc_D <- function(feature1, feature2) {
D1 <- filter(samples1, feature == feature1)$D
D2 <- filter(samples1, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:4000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>%
distinct() %>%
separate(feature, c("feature1", "feature2"))
things_to_calc
samples2
things_to_calc <- samples2 %>% select( -D, -.draw)
samples2
things_to_calc
summary(things_to_calc)
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring))
summary(things_to_calc)
samples1
slopes1
summary(slopes1)
samples_ff
samples_ff <- as_draws_df(m, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "D") %>%
mutate(feature = str_remove(feature, "b_feature"),
feature = str_remove(feature, ":lnd")) %>%
select(-.iteration, -.chain)
samples_ff
samples_ff %>% separate(feature, into = c("ring", "feature"), sep = ":") %>%
mutate(ring = parse_number(ring)) -> samples_ff
samples_ff
summary(samples_ff)
samples_ff <- as_draws_df(m, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "D") %>%
mutate(feature = str_remove(feature, "b_feature"),
feature = str_remove(feature, ":lnd")) %>%
select(-.iteration, -.chain)
tail(samples_ff)
unique(samples_ff$feature)
m2
m
raws_df(m, ff,
samples_ff <- as_draws_df(m, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "D") %>%
mutate(feature = str_remove(feature, "b_"),
feature = str_remove(feature, ":lnd")) %>%
select(-.iteration, -.chain)
)
samples_ff <- as_draws_df(m, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "D") %>%
mutate(feature = str_remove(feature, "b_"),
feature = str_remove(feature, ":lnd")) %>%
select(-.iteration, -.chain)
samples_ff
tail(samples_ff)
unique(samples_ff)
unique(samples_ff$feature)
ff
ff <- str_subset(get_variables(m), "b_[a-z_123]*:")
ff
source("~/Documents/ongoing projects/APP_VS/analysis_revised/4_main/get_slopes_fun.R", echo=TRUE)
samples1 <- get_slopes(m1, 1, TRUE) %>% mutate(feature = str_remove(feature, "feature"))
samples2 <- get_slopes(m2, 1, TRUE) %>%
select(-observer, -rD) %>%
distinct() %>%
mutate(feature = str_remove(feature, "feature"),
feature1 = str_extract(feature, "orange|pink|purple"),
feature2 = str_extract(feature, "circle|diamond|triangle"))
calc_D <- function(feature1, feature2) {
D1 <- filter(samples1, feature == feature1)$D
D2 <- filter(samples1, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:4000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring))
things_to_calc
slopes <- pmap_df(things_to_calc, calc_D) %>% full_join(samples2, by = c(".draw", "feature", "ring"))
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring)) %>%
select(-feature)
things_to_calc
calc_D <- function(ring, feature1, feature2) {
rn = ring
D1 <- filter(samples1, ring = rn, feature == feature1)$D
D2 <- filter(samples1, ring - rn, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:4000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring)) %>%
select(-feature)
slopes <- pmap_df(things_to_calc, calc_D) %>% full_join(samples2, by = c(".draw", "feature", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
calc_D <- function(ring, feature1, feature2) {
rn = ring
D1 <- filter(samples1, ring == rn, feature == feature1)$D
D2 <- filter(samples1, ring == rn, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:4000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring)) %>%
select(-feature)
slopes <- pmap_df(things_to_calc, calc_D) %>% full_join(samples2, by = c(".draw", "feature", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
ring = 1
things_to_calc
feature1 = "orabge"
feature1 = "orange"
feature2 = "circle"
rn = ring
D1 <- filter(samples1, ring == rn, feature == feature1)$D
D2 <- filter(samples1, ring == rn, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
calc_D <- function(ring, feature1, feature2) {
rn = ring
D1 <- filter(samples1, ring == rn, feature == feature1)$D
D2 <- filter(samples1, ring == rn, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:10000,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring)) %>%
select(-feature)
slopes <- pmap_df(things_to_calc, calc_D) %>% full_join(samples2, by = c(".draw", "feature", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring)) %>%
select(-feature) %>% distinct()
slopes <- pmap_df(things_to_calc, calc_D) %>% full_join(samples2, by = c(".draw", "feature", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
samples2
calc_D <- function(ring, feature1, feature2) {
rn = ring
D1 <- filter(samples1, ring == rn, feature == feature1)$D
D2 <- filter(samples1, ring == rn, feature == feature2)$D
# now calculate D_overall using the three proposed methods
D_collinear = 1/((1/D1) + (1/D2))
D_best_feature = pmin(D1, D2)
D_orth_contrast =  1/sqrt(1/(D1^2) + (1/D2^2))
return(tibble(.draw = 1:10000,
ring = ring,
feature = paste(feature1, feature2, sep = "_"),
feature1 = feature1, feature2 = feature2,
collinear = D_collinear,
`best feature` = D_best_feature,
`orthogonal contrast` = D_orth_contrast))
}
things_to_calc <- samples2 %>% select( -D, -.draw) %>% filter(is.finite(ring)) %>%
select(-feature) %>% distinct()
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
pmap_df(things_to_calc, calc_D)
samples2
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature1", "feature2", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature1", "feature2", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp")
slopes
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature1", "feature2", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature.x, -feature.y) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type)
slopes
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature1", "feature2", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature.x, -feature.y) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D")
ggplot(slopes, aes(Dp, D)) + geom_point()
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature1", "feature2", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature.x, -feature.y)
ggplot(slopes, aes(Dp, D)) + geom_point()
slopes <- pmap_df(things_to_calc, calc_D) %>%
full_join(samples2, by = c(".draw", "feature1", "feature2", "ring")) %>%
pivot_longer(c(collinear, `best feature`, `orthogonal contrast`), names_to = "method", values_to = "Dp") %>%
select(-feature.x, -feature.y) %>%
pivot_longer(c(D, Dp), names_to = "type", values_to = "D") %>%
group_by(feature1, feature2, ring,  method, type) %>%
median_hdci()
slopes
9*3
9*3*3
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE)
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring))
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max)) +
geom_point() +
geom_errorbar(alpha = 0.5, colour = "yellow") +
geom_errorbarh(alpha = 0.5, colour = "yellow") +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="yellow1") +
facet_wrap(~method, scales = "free") +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
knitr::opts_chunk$set(
echo = TRUE,
fig.height = 3,
fig.align = "center")
library(ggpmisc)
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max)) +
geom_point() +
geom_errorbar(alpha = 0.5, colour = "yellow") +
geom_errorbarh(alpha = 0.5, colour = "yellow") +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="yellow1") +
facet_wrap(~method, scales = "free") +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = ring, group = 1)) +
geom_point() +
geom_errorbar(alpha = 0.5, colour = "yellow") +
geom_errorbarh(alpha = 0.5, colour = "yellow") +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="yellow1") +
facet_wrap(~method, scales = "free") +
scale_colour_manual(values = c("yellow1", "yellow1", "yellow1"))
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring), group = 1)) +
geom_point() +
geom_errorbar(alpha = 0.5, colour = "blue") +
geom_errorbarh(alpha = 0.5, colour = "blue") +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="blue") +
facet_wrap(~method, scales = "free") +
scale_colour_manual(values = c("blue", "blue", "blue"))
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring), group = 1)) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="blue") +
facet_wrap(~method, scales = "free") +
scale_colour_manual(values = c("blue", "blue", "blue"))
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring), group = 1)) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="blue") +
facet_wrap(~method, scales = "free")
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring))) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3") +
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring))) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3")
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring))) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T, colour = "violetred3")
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring))) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T)
slopes %>%
unite(D, D, .lower, .upper) %>%
select(-.width, -.point, -.interval) %>%
pivot_wider(names_from = "type", values_from = "D") %>%
separate(D, into = c("De", "De_min", "De_max"), sep = "_", convert = TRUE) %>%
separate(Dp, into = c("Dp", "Dp_min", "Dp_max"), sep = "_", convert=  TRUE) %>%
filter(is.finite(ring)) %>%
ggplot(aes(x = Dp, xmin = Dp_min, xmax = Dp_max, y = De, ymin = De_min, ymax = De_max, colour = as_factor(ring))) +
geom_point() +
geom_errorbar(alpha = 0.5) +
geom_errorbarh(alpha = 0.5) +
geom_abline(linetype = 2) +
geom_smooth(method = "lm", fullrange  = T) +
# stat_poly_eq(formula = y ~ x,
#              aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")),
#              parse = TRUE, size = 2.8, label.y = 0.9, coef.digits = 3, rr.digits = 4, colour="blue") +
facet_wrap(~method, scales = "free")
