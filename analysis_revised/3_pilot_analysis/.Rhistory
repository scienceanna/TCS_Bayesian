rt > quantile(rt, 0.01),
rt < quantile(rt, 0.99)) -> d
# Replicate nD=0 trials and remove outliers
d <- bind_rows(filter(d, nd != 0),
filter(d, nd == 0) %>% mutate(colour = "1"),
filter(d, nd == 0) %>% mutate(colour = "2"),
filter(d, nd == 0) %>% mutate(colour = "3")) %>%
mutate(lnd = log(nd+1))
library(tidyverse)
# reduce the number of decimal places
options(digits = 3)
# functions used for our Bayesian re-analysis
source("../scripts/our_functions.R")
# set seed to make sure everything is reproducible
set.seed(100320021)
d <- read_csv("../../data/pilot/accuracy_rt_data.txt") %>%
filter(!is.na(rt)) %>%
mutate(
observer = as_factor(observer),
colour = as_factor(colour),
nd = no_distractors) %>%
select(observer, experiment, colour, nd, accuracy, rt)
# check acc is ok
d %>% group_by(observer, experiment, colour, nd) %>%
summarise(acc = mean(accuracy)) %>%
ggplot(aes(x = observer, y = acc, fill = as_factor(nd))) +
geom_col(position = position_dodge())+
facet_wrap(~experiment)
# remove incorrect trials
d <- filter(d, accuracy == 1)
# remove 1st and 100th percentile RT
d %>% filter(
rt > quantile(rt, 0.01),
rt < quantile(rt, 0.99)) -> d
# Replicate nD=0 trials and remove outliers
d <- bind_rows(filter(d, nd != 0),
filter(d, nd == 0) %>% mutate(colour = "1"),
filter(d, nd == 0) %>% mutate(colour = "2"),
filter(d, nd == 0) %>% mutate(colour = "3")) %>%
mutate(lnd = log(nd+1))
# tidy up experiment and feature labels
d %>% mutate(exp = parse_number(experiment)) %>%
unite(feature, experiment, colour) %>%
mutate(
feature = str_replace_all(feature, "1a_1", "orange"),
feature = str_replace_all(feature, "1a_2", "pink"),
feature = str_replace_all(feature, "1a_3", "purple"),
feature = str_replace_all(feature, "1b_1", "circle"),
feature = str_replace_all(feature, "1b_2", "diamond"),
feature = str_replace_all(feature, "1b_3", "triangle"),
feature = str_replace_all(feature, "2a_1", "pink circle"),
feature = str_replace_all(feature, "2a_2", "orange diamond"),
feature = str_replace_all(feature, "2a_3", "purple triangle"),
feature = str_replace_all(feature, "2b_1", "orange circle"),
feature = str_replace_all(feature, "2b_2", "purple diamond"),
feature = str_replace_all(feature, "2b_3", "pink triangle"),
feature = str_replace_all(feature, "2c_1", "purple circle"),
feature = str_replace_all(feature, "2c_2", "pink diamond"),
feature = str_replace_all(feature, "2c_3", "orange triangle"),
feature = as_factor(feature)) -> d
# split into training and set sets
d1 <- filter(d, exp == 1)
d2 <- filter(d, exp == 2) %>%
separate(feature, into = c("feature1", "feature2"))
d1
d2
source("pre_process_pilot.R")
d1
my_f <- bf(rt ~ feature:lnd + (feature:lnd|person),
ndt ~ 1 + (1|person))
library(brms)
my_f <- bf(rt ~ feature:lnd + (feature:lnd|person),
ndt ~ 1 + (1|person))
my_inits <- list(list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10))
my_prior <- c(
prior_string("normal(-0.5, 0.3)",  class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
n_chains = 4
n_itr = 5000
# now run model
m <- brm(
my_f,
data = df,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = d1,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
d1
my_f <- bf(rt ~ feature:lnd + (feature:lnd|observer),
ndt ~ 1 + (1|person))
# now run model
m <- brm(
my_f,
data = d1,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
my_f <- bf(rt ~ feature:lnd + (feature:lnd|observer),
ndt ~ 1 + (1|observer))
# now run model
m <- brm(
my_f,
data = d1,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# use parallel cores for mcmc chains!
options(mc.cores = parallel::detectCores())
n_itr = 1000
# now run model
m <- brm(
my_f,
data = d1,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
saveRDS(m, "pilot1.model")
m
rm(m)
# now run model
m <- brm(
my_f,
data = d2,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
m
# now run model
m <- brm(
my_f,
data = d2,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
d2
# now run model
m <- brm(
my_f,
data = d1,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = d2,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
# now run model
m <- brm(
my_f,
data = d2,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
library(tidyverse)
library(brms)
source("pre_process_pilot.R")
# use parallel cores for mcmc chains!
options(mc.cores = parallel::detectCores())
## fit model to training data
my_f <- bf(rt ~ feature:lnd + (feature:lnd|observer),
ndt ~ 1 + (1|observer))
my_inits <- list(list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10), list(Intercept_ndt = -10))
my_prior <- c(
prior_string("normal(-0.5, 0.3)",  class = "Intercept"),
prior_string("normal(0, 0.2)", class = "b"),
prior_string("normal(-1, 0.5)", class = "Intercept", dpar = "ndt" ),
prior_string("cauchy(0, 0.4)", class = "sigma"),
prior_string("cauchy(0, 0.05)", class = "sd"),
prior_string("cauchy(0, 0.05)", class = "sd", dpar = "ndt"))
n_chains = 4
n_itr = 1000
# now run model
m <- brm(
my_f,
data = d2,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
d2
2
my_f <- bf(rt ~ feature1:feature2:lnd + (feature1:feature2:lnd|observer),
ndt ~ 1 + (1|observer))
m <- brm(
my_f,
data = d2,
family = brmsfamily("shifted_lognormal"),
prior = my_prior,
chains = n_chains,
iter = n_itr,
inits = my_inits,
##stanvars = my_stanvar,
save_pars = save_pars(all=TRUE),
silent = TRUE
)
saveRDS(m, "pilot2.model")
m
m1 <- readRDS("pilot1.model")
m1
get_variables(m1)
library(tidyverse)
library(brms)
library(tidybayes)
get_variables(m1)
slopes <- str_subset(, "[rb]_[a-z_1]*:")
slopes <- str_subset(get_variables(m1), "[rb]_[a-z_1]*:")
slopes
rf <- str_subset(get_variables(m1), "r_observer.*:")
rf
rf <- str_subset(get_variables(m1), "r_observer[.*:")
rf <- str_subset(get_variables(m1), "r_observer\[.*:")
rf <- str_subset(get_variables(m1), "r_observer\\[.*:")
rf
samples <- as_draws_df(m, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100))
ff <- str_subset(get_variables(m1), "b_[a-z_1]*:")
samples <- as_draws_df(m, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100))
samples <- as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100))
samples <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100))
samples
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(names_to = "feature", values_to = "rD")
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(.,names_to = "feature", values_to = "rD")
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(select_all(), names_to = "feature", values_to = "rD")
names(samples)
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD")
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD")
samples_df
samples_rf
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature, str_remove_all(feature, "(samples_rf[)"))
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature, str_remove_all(feature, "(samples_rf\\[)"))
samples_rf
as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature, str_remove_all(feature, "( r_observer\\[)"))
as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature, str_remove_all(feature, "(r_observer\\[)"))
as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature, str_remove_all(feature, "r_observer\\["))
as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature, str_remove_all(feature, "r_observer"))
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"))
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",")
samples_rf
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_integer(observer))
samples_rf
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer))
samples_rf
as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"))
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(featre, ":lnd]"))
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(feature, ":lnd]"))
samples_rf
ggplot(samples_rf, aes(rD, fill = feature)) + geom_density(alpha = 0.5) +
facet_wrap(~observer)
as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100))
samples_rf <- as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD")
samples_ff <- as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD")
samples_ff
samples_ff <- as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
mutate(feature = str_remove(feature, "b_feature"),
feature = str_remove(feature, ":lnd"))
ggplot(samples_ff, aes(rD, fill = feature)) + geom_density(alpha = 0.5)
samples_ff
samples_rf
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(feature, ":lnd]"))
samples_rf
summary(samples_ff)
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(feature, ":lnd]")) %>%
select(-.iter, -.chain)
samples_ff <- as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "D") %>%
mutate(feature = str_remove(feature, "b_feature"),
feature = str_remove(feature, ":lnd")) %>%
select(-iteration, -.chain)
samples <- full_join(samples_ff, samples_rf)
samples
library(tidyverse)
library(brms)
library(tidybayes)
m1 <- readRDS("pilot1.model")
ff <- str_subset(get_variables(m1), "b_[a-z_1]*:")
rf <- str_subset(get_variables(m1), "r_observer\\[.*:")
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(feature, ":lnd]")) %>%
select(-iteration, -.chain)
ggplot(samples_rf, aes(rD, fill = feature)) + geom_density(alpha = 0.5) +
facet_wrap(~observer)
samples_ff <- as_draws_df(m1, ff,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "D") %>%
mutate(feature = str_remove(feature, "b_feature"),
feature = str_remove(feature, ":lnd")) %>%
select(-.iteration, -.chain)
ggplot(samples_ff, aes(rD, fill = feature)) + geom_density(alpha = 0.5)
full_join(samples_ff, samples_rf)
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(feature, ":lnd]")) %>%
select(-iteration, -.chain)
samples_rf <- as_draws_df(m1, rf,
add_chain = TRUE,
subset =sample(1:nsamples(m), n_draws = 100)) %>%
pivot_longer(-c(".chain", ".iteration", ".draw"), names_to = "feature", values_to = "rD") %>%
separate(feature, into = c("observer", "feature"), sep = ",") %>%
mutate(observer = parse_number(observer),
feature = str_remove(feature, "feature"),
feature = str_remove(feature, ":lnd]")) %>%
select(-.iteration, -.chain)
samples <- full_join(samples_ff, samples_rf)
samples
m2 <- readRDS("pilot2.model") %>%
mutate(rD = D + rD)
samples <- full_join(samples_ff, samples_rf) %>%
mutate(rD = D + rD)
samples
rm(samples_ff, samples_rf)
samples
