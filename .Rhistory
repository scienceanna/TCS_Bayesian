library(tidyverse)
source("/scripts/import_and_tidy.R")
source("analysis_revised/scripts/import_and_tidy.R")
source("analysis_revised/scripts/import_and_tidy.R")
source("analysis_revised/scripts/import_and_tidy.R")
source("analysis_revised/scripts/import_and_tidy.R")
source("analysis_revised/scripts/import_and_tidy.R")
d
hist(d$rt)
hist(exp(d$rt))
hist(log(d$rt))
hist(rlnorm(1000, 6, 1))
exp(6)
hist(d$rt)
hist(rlnorm(1000, 6, 2))
hist(rlnorm(1000, 6, 1.1))
hist(rlnorm(1000, 5.5, 1.1))
hist(rlnorm(1000, 5.5, 1.1))
hist(rlnorm(1000, 5.5, 1.1))
hist(rlnorm(1000, 5.5, 1.1))
hist(rlnorm(1000, 5.5, 1))
mean(log(d$rt))
summary(d)
d <- filter(d, rt >0)
mean(log(d$rt))
sd(log(d$rt))
mu <- 6.315
sigma <- 0.319
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples)),
median_rt = median(samples)))
}
d <- map_dfr(rep(seq(6,40, by = 2), each = 1000), do_calc, mu, sigma)
gt <- tibble(summary = c("mean_log_rt", "mean_rt", "median_rt"),
ground_truth = c(0, exp(mu + (sigma^2)/2), 1))
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = stat), linetype = 2)
d
summary(d)
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free")
d %>% mutate(abs_err = abs(stat - ground_truth)) %>%
ggplot(aes(n, abs_err)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary)
gt <- tibble(summary = c("mean_log_rt", "mean_rt", "median_rt"),
ground_truth = c(0, exp(mu + (sigma^2)/2), 6.3))
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d <- map_dfr(rep(seq(6,40, by = 2), each = 1000), do_calc, mu, sigma)
gt <- tibble(summary = c("mean_log_rt", "mean_rt", "median_rt"),
ground_truth = c(0, exp(mu + (sigma^2)/2), 6.3))
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = stat), linetype = 2)
d %>% mutate(abs_err = abs(stat - ground_truth)) %>%
ggplot(aes(n, abs_err)) +
tidybayes::stat_lineribbon(alpha = 0.5)
d %>% mutate(abs_err = abs(stat - ground_truth)) %>%
ggplot(aes(n, abs_err)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary)
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d <- map_dfr(rep(seq(6,40, by = 2), each = 1000), do_calc, mu, sigma)
gt <- tibble(summary = c("mean_log_rt", "mean_rt", "median_rt"),
ground_truth = c(0, exp(mu + (sigma^2)/2), 6.3))
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d
d %>% mutate(abs_err = abs(stat - ground_truth)) %>%
ggplot(aes(n, abs_err)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary)
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = stat), linetype = 2)
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2)
#source("analysis_revised/scripts/import_and_tidy.R")
summary(d)
mu <- 6.315
sigma <- 0.32
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples))))
}
d <- map_dfr(rep(c(10, 12, 15, 20, 30, 40), each = 10000), do_calc, mu, sigma)
library(tidyverse)
mu <- 6.315
sigma <- 0.32
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples))))
}
d <- map_dfr(rep(c(10, 12, 15, 20, 30, 40), each = 10000), do_calc, mu, sigma)
gt <- tibble(summary = c("mean_log_rt", "mean_rt"),
ground_truth = c(mu, exp(mu + (sigma^2)/2)))
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2)
d %>% mutate(err = (stat - ground_truth)) %>%
group_by(n, summary) %>%
summarise(err0.05 = quantile(err, 0.05),
err0.25 = quantile(err, 0.25),
err0.75 = quantile(err, 0.75),
err0.95 = quantile(err, 0.95)) %>%
filter(summary == "mean_rt") %>%
select(-summary) -> derr
derr$err0.05 <- derr$err0.05/max(derr$err0.05)
derr$err0.25 <- derr$err0.25/max(derr$err0.25)
derr$err0.75 <- derr$err0.75/min(derr$err0.75)
derr$err0.95 <- derr$err0.95/min(derr$err0.95)
derr %>%
knitr::kable(digits = 2)
?rlnorm
d
rt <- 250:1000
plot(rt, dlnorm(rt, 6.135, 0.32))
rt <- 0:1000
plot(rt, dlnorm(rt, 6.135, 0.32))
d
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples)),
sd_log = sd(log(samples))))
}
d <- map_dfr(rep(c(10, 12, 15, 20, 30, 40), each = 1000), do_calc, mu, sigma)
d
dplot <- filter(d, n == 20)
dpot
dplot
dplot <- filter(d, n == 20)[1:10, ]
plt <- ggplot(aes(x = rt, y = dlnorm(rt, 6.315, 0.32))) + geom_path()
plt <- ggplot(dplot, aes(x = rt, y = dlnorm(rt, 6.315, 0.32))) + geom_path()
plt
plt <- ggplot(tibbe(x = rt, y =  y = dlnorm(rt, 6.315, 0.32)), aes(x, y)) + geom_path()
plt <- ggplot(tibbe(x = rt, y =  y = dlnorm(rt, 6.315, 0.32))), aes(x, y)) + geom_path()
dplt_gt <- tibbe(x = rt, y =  y = dlnorm(rt, 6.315, 0.32))
dplt_gt <- tibbe(x = rt, y =   dlnorm(rt, 6.315, 0.32))
dplt_gt <- tibble(x = rt, y =   dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path()
plt
rt <- 0:1500
dplot <- filter(d, n == 20)[1:10, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path()
plt
dplot
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path()
for (i in 1:10) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt)
}
plt
plt <- plt + geom_path(data = dplt_gt, colour = "blue")
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:10) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue")
}
plt + theme_bw()
dplot <- filter(d, n == 20)[1:100, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:10) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt + theme_bw()
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:100) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt + theme_bw()
dplot <- filter(d, n == 20)[1:50, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:50) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt + theme_bw()
dplot <- filter(d, n == 20)[1:25, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:25) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt + theme_bw() +
scale_y_continuous("density") +
scale_x_continuous("reaction time")
library(tidyverse)
library(patchwork)
# sampling from a log normal estiamte acc sim
#source("analysis_revised/scripts/import_and_tidy.R")
summary(d)
mu <- 6.315
sigma <- 0.32
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples)),
sd_log = sd(log(samples))))
}
d <- map_dfr(rep(c(10, 12, 15, 20, 30, 40), each = 1000), do_calc, mu, sigma)
rt <- 0:1500
dplot <- filter(d, n == 20)[1:25, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:25) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt <- plt + theme_bw() +
scale_y_continuous("density") +
scale_x_continuous("reaction time")
gt <- tibble(summary = c("mean_log_rt", "mean_rt"),
ground_truth = c(mu, exp(mu + (sigma^2)/2)))
d %>% pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
library(tidyverse)
library(patchwork)
# sampling from a log normal estiamte acc sim
#source("analysis_revised/scripts/import_and_tidy.R")
summary(d)
mu <- 6.315
sigma <- 0.32
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples)),
sd_log = sd(log(samples))))
}
d <- map_dfr(rep(c(10, 12, 15, 20, 30, 40, 50, 60), each = 1000), do_calc, mu, sigma)
rt <- 0:1500
dplot <- filter(d, n == 20)[1:25, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:25) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt <- plt + theme_bw() +
scale_y_continuous("density") +
scale_x_continuous("reaction time")
gt <- tibble(summary = c("mean_log_rt", "mean_rt"),
ground_truth = c(mu, exp(mu + (sigma^2)/2)))
d
d %>% select(mean_rt) %>%
pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
d
d %>% select(n, mean_rt) %>%
pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5) +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5, colour = "blue") +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.5, fill = "blue") +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.25, fill = "blue") +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
library(tidyverse)
library(patchwork)
# sampling from a log normal estiamte acc sim
#source("analysis_revised/scripts/import_and_tidy.R")
summary(d)
mu <- 6.315
sigma <- 0.32
do_calc <- function(n, mu, sigma) {
samples <- rlnorm(n, mu, sigma)
return(tibble(n = n,
mean_rt = mean(samples),
mean_log_rt = mean(log(samples)),
sd_log = sd(log(samples))))
}
d <- map_dfr(rep(c(10, 12, 15, 20, 30, 40, 50, 60), each = 1000), do_calc, mu, sigma)
rt <- 0:1500
dplot <- filter(d, n == 20)[1:25, ]
dplt_gt <- tibble(x = rt, y = dlnorm(rt, 6.315, 0.32))
plt <- ggplot(dplt_gt, aes(x, y)) + geom_path(size = 2)
for (i in 1:25) {
dplt_gt <- tibble(x = rt, y = dlnorm(rt, dplot$mean_log_rt[i], dplot$sd_log[i]))
plt <- plt + geom_path(data = dplt_gt, colour = "blue", alpha = 0.25)
}
plt <- plt + theme_bw() +
scale_y_continuous("density") +
scale_x_continuous("reaction time")
gt <- tibble(summary = c("mean_rt"),
ground_truth = c(exp(mu + (sigma^2)/2)))
d %>% select(n, mean_rt) %>%
pivot_longer(-n, names_to = "summary", values_to = "stat") %>%
full_join(gt) -> d
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.25, fill = "blue") +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() -> plt2
plt + plt2
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.25, fill = "blue") +
facet_wrap(~summary, scales = "free") +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() +
scale_y_continuous("reaction time") -> plt2
plt + plt2
source("~/GitHub/TCS_Bayesian/n_trial_sims.R", echo=TRUE)
source("~/GitHub/TCS_Bayesian/n_trial_sims.R", echo=TRUE)
derr$err0.05 <- derr$err0.05/derr$err0.05[which(derr$n==40)]
d %>% mutate(err = (stat - ground_truth)) %>%
group_by(n, summary) %>%
summarise(err0.05 = quantile(err, 0.05),
err0.25 = quantile(err, 0.25),
err0.75 = quantile(err, 0.75),
err0.95 = quantile(err, 0.95)) %>%
filter(summary == "mean_rt") %>%
select(-summary) -> derr
derr$err0.05 <- derr$err0.05/derr$err0.05[which(derr$n==40)]
derr$err0.25 <- derr$err0.25/max(derr$err0.25)
derr$err0.75 <- derr$err0.75/min(derr$err0.75)
derr$err0.95 <- derr$err0.95/min(derr$err0.95)
derr %>%
knitr::kable(digits = 2)
d %>% mutate(err = (stat - ground_truth)) %>%
group_by(n, summary) %>%
summarise(err0.05 = quantile(err, 0.05),
err0.25 = quantile(err, 0.25),
err0.75 = quantile(err, 0.75),
err0.95 = quantile(err, 0.95)) %>%
filter(summary == "mean_rt") %>%
select(-summary) -> derr
derr$err0.05 <- derr$err0.05/derr$err0.05[which(derr$n==40)]
derr$err0.25 <- derr$err0.25/derr$err0.25[which(derr$n==40)]
derr$err0.75 <- derr$err0.75/derr$err0.75[which(derr$n==40)]
derr$err0.95 <- derr$err0.95/derr$err0.95[which(derr$n==40)]
derr %>%
knitr::kable(digits = 2)
d %>%
ggplot(aes(n, stat)) +
tidybayes::stat_lineribbon(alpha = 0.25, fill = "blue", colour = NA) +
geom_hline(data = gt, aes(yintercept = ground_truth), linetype = 2) +
theme_bw() +
scale_y_continuous("reaction time") -> plt2
plt + plt2
ggsave("n_trials.pdf", width = 8, height = 4)
ggsave("n_trials.pdf", width = 8, height = 3)
